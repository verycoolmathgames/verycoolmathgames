{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path_1 = require(\"./path\");\n\nconst reference_1 = require(\"./reference\");\n\nconst serializer_1 = require(\"./serializer\");\n\nconst util_1 = require(\"./util\");\n\nconst validate_1 = require(\"./validate\");\n/*!\n * Error message for transactional reads that were executed after performing\n * writes.\n */\n\n\nconst READ_AFTER_WRITE_ERROR_MSG = 'Firestore transactions require all reads to be executed before all writes.';\n/*!\n * Transactions can be retried if the initial stream opening errors out.\n */\n\nconst ALLOW_RETRIES = true;\n/**\n * A reference to a transaction.\n *\n * The Transaction object passed to a transaction's updateFunction provides\n * the methods to read and write data within the transaction context. See\n * [runTransaction()]{@link Firestore#runTransaction}.\n *\n * @class\n */\n\nclass Transaction {\n  /**\n   * @hideconstructor\n   *\n   * @param firestore The Firestore Database client.\n   * @param previousTransaction If available, the failed transaction that is\n   * being retried.\n   */\n  constructor(firestore, previousTransaction) {\n    this._firestore = firestore;\n    this._previousTransaction = previousTransaction;\n    this._writeBatch = firestore.batch();\n    this._requestTag = previousTransaction ? previousTransaction.requestTag : util_1.requestTag();\n  }\n  /**\n   * Retrieve a document or a query result from the database. Holds a\n   * pessimistic lock on all returned documents.\n   *\n   * @param {DocumentReference|Query} refOrQuery The document or query to\n   * return.\n   * @returns {Promise} A Promise that resolves with a DocumentSnapshot or\n   * QuerySnapshot for the returned documents.\n   *\n   * @example\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   return transaction.get(documentRef).then(doc => {\n   *     if (doc.exists) {\n   *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n   *     } else {\n   *       transaction.create(documentRef, { count: 1 });\n   *     }\n   *   });\n   * });\n   */\n\n\n  get(refOrQuery) {\n    if (!this._writeBatch.isEmpty) {\n      throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n    }\n\n    if (refOrQuery instanceof reference_1.DocumentReference) {\n      return this._firestore.getAll_([refOrQuery],\n      /* fieldMask= */\n      null, this._requestTag, this._transactionId).then(res => {\n        return Promise.resolve(res[0]);\n      });\n    }\n\n    if (refOrQuery instanceof reference_1.Query) {\n      return refOrQuery._get(this._transactionId);\n    }\n\n    throw new Error('Value for argument \"refOrQuery\" must be a DocumentReference or a Query.');\n  }\n  /**\n   * Retrieves multiple documents from Firestore. Holds a pessimistic lock on\n   * all returned documents.\n   *\n   * The first argument is required and must be of type `DocumentReference`\n   * followed by any additional `DocumentReference` documents. If used, the\n   * optional `ReadOptions` must be the last argument.\n   *\n   * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n   * `DocumentReferences` to receive, followed by an optional field mask.\n   * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n   * contains an array with the resulting document snapshots.\n   *\n   * @example\n   * let firstDoc = firestore.doc('col/doc1');\n   * let secondDoc = firestore.doc('col/doc2');\n   * let resultDoc = firestore.doc('col/doc3');\n   *\n   * firestore.runTransaction(transaction => {\n   *   return transaction.getAll(firstDoc, secondDoc).then(docs => {\n   *     transaction.set(resultDoc, {\n   *       sum: docs[0].get('count') + docs[1].get('count')\n   *     });\n   *   });\n   * });\n   */\n\n\n  getAll(...documentRefsOrReadOptions) {\n    if (!this._writeBatch.isEmpty) {\n      throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n    }\n\n    validate_1.validateMinNumberOfArguments('Transaction.getAll', arguments, 1);\n\n    const _parseGetAllArguments = parseGetAllArguments(documentRefsOrReadOptions),\n          documents = _parseGetAllArguments.documents,\n          fieldMask = _parseGetAllArguments.fieldMask;\n\n    return this._firestore.getAll_(documents, fieldMask, this._requestTag, this._transactionId);\n  }\n  /**\n   * Create the document referred to by the provided\n   * [DocumentReference]{@link DocumentReference}. The operation will\n   * fail the transaction if a document exists at the specified location.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * created.\n   * @param {DocumentData} data The object data to serialize as the document.\n   * @returns {Transaction} This Transaction instance. Used for\n   * chaining method calls.\n   *\n   * @example\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   return transaction.get(documentRef).then(doc => {\n   *     if (!doc.exists) {\n   *       transaction.create(documentRef, { foo: 'bar' });\n   *     }\n   *   });\n   * });\n   */\n\n\n  create(documentRef, data) {\n    this._writeBatch.create(documentRef, data);\n\n    return this;\n  }\n  /**\n   * Writes to the document referred to by the provided\n   * [DocumentReference]{@link DocumentReference}. If the document\n   * does not exist yet, it will be created. If you pass\n   * [SetOptions]{@link SetOptions}, the provided data can be merged into the\n   * existing document.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * set.\n   * @param {DocumentData} data The object to serialize as the document.\n   * @param {SetOptions=} options An object to configure the set behavior.\n   * @param {boolean=} options.merge - If true, set() merges the values\n   * specified in its data argument. Fields omitted from this set() call\n   * remain untouched.\n   * @param {Array.<string|FieldPath>=} options.mergeFields - If provided,\n   * set() only replaces the specified field paths. Any field path that is not\n   * specified is ignored and remains untouched.\n   * @returns {Transaction} This Transaction instance. Used for\n   * chaining method calls.\n   *\n   * @example\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   transaction.set(documentRef, { foo: 'bar' });\n   *   return Promise.resolve();\n   * });\n   */\n\n\n  set(documentRef, data, options) {\n    this._writeBatch.set(documentRef, data, options);\n\n    return this;\n  }\n  /**\n   * Updates fields in the document referred to by the provided\n   * [DocumentReference]{@link DocumentReference}. The update will\n   * fail if applied to a document that does not exist.\n   *\n   * The update() method accepts either an object with field paths encoded as\n   * keys and field values encoded as values, or a variable number of arguments\n   * that alternate between field paths and field values. Nested fields can be\n   * updated by providing dot-separated field path strings or by providing\n   * FieldPath objects.\n   *\n   * A Precondition restricting this update can be specified as the last\n   * argument.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * updated.\n   * @param {UpdateData|string|FieldPath} dataOrField An object\n   * containing the fields and values with which to update the document\n   * or the path of the first field to update.\n   * @param {\n   * ...(Precondition|*|string|FieldPath)} preconditionOrValues -\n   * An alternating list of field paths and values to update or a Precondition\n   * to to enforce on this update.\n   * @returns {Transaction} This Transaction instance. Used for\n   * chaining method calls.\n   *\n   * @example\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   return transaction.get(documentRef).then(doc => {\n   *     if (doc.exists) {\n   *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n   *     } else {\n   *       transaction.create(documentRef, { count: 1 });\n   *     }\n   *   });\n   * });\n   */\n\n\n  update(documentRef, dataOrField, ...preconditionOrValues) {\n    validate_1.validateMinNumberOfArguments('Transaction.update', arguments, 2);\n\n    this._writeBatch.update.apply(this._writeBatch, [documentRef, dataOrField, ...preconditionOrValues]);\n\n    return this;\n  }\n  /**\n   * Deletes the document referred to by the provided [DocumentReference]\n   * {@link DocumentReference}.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * deleted.\n   * @param {Precondition=} precondition A precondition to enforce for this\n   * delete.\n   * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n   * document was last updated at lastUpdateTime. Fails the transaction if the\n   * document doesn't exist or was last updated at a different time.\n   * @returns {Transaction} This Transaction instance. Used for\n   * chaining method calls.\n   *\n   * @example\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   transaction.delete(documentRef);\n   *   return Promise.resolve();\n   * });\n   */\n\n\n  delete(documentRef, precondition) {\n    this._writeBatch.delete(documentRef, precondition);\n\n    return this;\n  }\n  /**\n   * Starts a transaction and obtains the transaction id from the server.\n   *\n   * @private\n   */\n\n\n  begin() {\n    const request = {\n      database: this._firestore.formattedName\n    };\n\n    if (this._previousTransaction) {\n      request.options = {\n        readWrite: {\n          retryTransaction: this._previousTransaction._transactionId\n        }\n      };\n    }\n\n    return this._firestore.request('beginTransaction', request, this._requestTag, ALLOW_RETRIES).then(resp => {\n      this._transactionId = resp.transaction;\n    });\n  }\n  /**\n   * Commits all queued-up changes in this transaction and releases all locks.\n   *\n   * @private\n   */\n\n\n  commit() {\n    return this._writeBatch.commit_({\n      transactionId: this._transactionId,\n      requestTag: this._requestTag\n    }).then(() => {});\n  }\n  /**\n   * Releases all locks and rolls back this transaction.\n   *\n   * @private\n   */\n\n\n  rollback() {\n    const request = {\n      database: this._firestore.formattedName,\n      transaction: this._transactionId\n    };\n    return this._firestore.request('rollback', request, this._requestTag,\n    /* allowRetries= */\n    false);\n  }\n  /**\n   * Returns the tag to use with with all request for this Transaction.\n   * @private\n   * @return A unique client-generated identifier for this transaction.\n   */\n\n\n  get requestTag() {\n    return this._requestTag;\n  }\n\n}\n\nexports.Transaction = Transaction;\n/**\n * Parses the arguments for the `getAll()` call supported by both the Firestore\n * and Transaction class.\n *\n * @private\n * @param documentRefsOrReadOptions An array of document references followed by\n * an optional ReadOptions object.\n */\n\nfunction parseGetAllArguments(documentRefsOrReadOptions) {\n  let documents;\n  let readOptions = undefined;\n\n  if (Array.isArray(documentRefsOrReadOptions[0])) {\n    throw new Error('getAll() no longer accepts an array as its first argument. ' + 'Please unpack your array and call getAll() with individual arguments.');\n  }\n\n  if (documentRefsOrReadOptions.length > 0 && serializer_1.isPlainObject(documentRefsOrReadOptions[documentRefsOrReadOptions.length - 1])) {\n    readOptions = documentRefsOrReadOptions.pop();\n    documents = documentRefsOrReadOptions;\n  } else {\n    documents = documentRefsOrReadOptions;\n  }\n\n  for (let i = 0; i < documents.length; ++i) {\n    reference_1.validateDocumentReference(i, documents[i]);\n  }\n\n  validateReadOptions('options', readOptions, {\n    optional: true\n  });\n  const fieldMask = readOptions && readOptions.fieldMask ? readOptions.fieldMask.map(fieldPath => path_1.FieldPath.fromArgument(fieldPath)) : null;\n  return {\n    fieldMask,\n    documents\n  };\n}\n\nexports.parseGetAllArguments = parseGetAllArguments;\n/**\n * Validates the use of 'options' as ReadOptions and enforces that 'fieldMask'\n * is an array of strings or field paths.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the ReadOptions can be omitted.\n */\n\nfunction validateReadOptions(arg, value, options) {\n  if (!validate_1.validateOptional(value, options)) {\n    if (!util_1.isObject(value)) {\n      throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'read option'), \" Input is not an object.'\"));\n    }\n\n    const options = value;\n\n    if (options.fieldMask !== undefined) {\n      if (!Array.isArray(options.fieldMask)) {\n        throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'read option'), \" \\\"fieldMask\\\" is not an array.\"));\n      }\n\n      for (let i = 0; i < options.fieldMask.length; ++i) {\n        try {\n          path_1.validateFieldPath(i, options.fieldMask[i]);\n        } catch (err) {\n          throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'read option'), \" \\\"fieldMask\\\" is not valid: \").concat(err.message));\n        }\n      }\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}