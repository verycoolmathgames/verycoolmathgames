{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util_1 = require(\"./util\");\n\nconst validate_1 = require(\"./validate\");\n/*!\n * The default database ID for this Firestore client. We do not yet expose the\n * ability to use different databases.\n */\n\n\nexports.DEFAULT_DATABASE_ID = '(default)';\n/*!\n * A regular expression to verify an absolute Resource Path in Firestore. It\n * extracts the project ID, the database name and the relative resource path\n * if available.\n *\n * @type {RegExp}\n */\n\nconst RESOURCE_PATH_RE = // Note: [\\s\\S] matches all characters including newlines.\n/^projects\\/([^/]*)\\/databases\\/([^/]*)(?:\\/documents\\/)?([\\s\\S]*)$/;\n/*!\n * A regular expression to verify whether a field name can be passed to the\n * backend without escaping.\n *\n * @type {RegExp}\n */\n\nconst UNESCAPED_FIELD_NAME_RE = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/*!\n * A regular expression to verify field paths that are passed to the API as\n * strings. Field paths that do not match this expression have to be provided\n * as a [FieldPath]{@link FieldPath} object.\n *\n * @type {RegExp}\n */\n\nconst FIELD_PATH_RE = /^[^*~/[\\]]+$/;\n/**\n * An abstract class representing a Firestore path.\n *\n * Subclasses have to implement `split()` and `canonicalString()`.\n *\n * @private\n * @class\n */\n\nclass Path {\n  /**\n   * Creates a new Path with the given segments.\n   *\n   * @private\n   * @hideconstructor\n   * @param segments Sequence of parts of a path.\n   */\n  constructor(segments) {\n    this.segments = segments;\n  }\n  /**\n   * Returns the number of segments of this field path.\n   *\n   * @private\n   */\n\n\n  get size() {\n    return this.segments.length;\n  }\n  /**\n   * Create a child path beneath the current level.\n   *\n   * @private\n   * @param relativePath Relative path to append to the current path.\n   * @returns The new path.\n   */\n\n\n  append(relativePath) {\n    if (relativePath instanceof Path) {\n      return this.construct(this.segments.concat(relativePath.segments));\n    }\n\n    return this.construct(this.segments.concat(this.split(relativePath)));\n  }\n  /**\n   * Returns the path of the parent node.\n   *\n   * @private\n   * @returns The new path or null if we are already at the root.\n   */\n\n\n  parent() {\n    if (this.segments.length === 0) {\n      return null;\n    }\n\n    return this.construct(this.segments.slice(0, this.segments.length - 1));\n  }\n  /**\n   * Checks whether the current path is a prefix of the specified path.\n   *\n   * @private\n   * @param other The path to check against.\n   * @returns 'true' iff the current path is a prefix match with 'other'.\n   */\n\n\n  isPrefixOf(other) {\n    if (other.segments.length < this.segments.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.segments.length; i++) {\n      if (this.segments[i] !== other.segments[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Compare the current path against another Path object.\n   *\n   * @private\n   * @param other The path to compare to.\n   * @returns -1 if current < other, 1 if current > other, 0 if equal\n   */\n\n\n  compareTo(other) {\n    const len = Math.min(this.segments.length, other.segments.length);\n\n    for (let i = 0; i < len; i++) {\n      if (this.segments[i] < other.segments[i]) {\n        return -1;\n      }\n\n      if (this.segments[i] > other.segments[i]) {\n        return 1;\n      }\n    }\n\n    if (this.segments.length < other.segments.length) {\n      return -1;\n    }\n\n    if (this.segments.length > other.segments.length) {\n      return 1;\n    }\n\n    return 0;\n  }\n  /**\n   * Returns a copy of the underlying segments.\n   *\n   * @private\n   * @returns A copy of the segments that make up this path.\n   */\n\n\n  toArray() {\n    return this.segments.slice();\n  }\n  /**\n   * Returns true if this `Path` is equal to the provided value.\n   *\n   * @private\n   * @param other The value to compare against.\n   * @return true if this `Path` is equal to the provided value.\n   */\n\n\n  isEqual(other) {\n    return this === other || other instanceof this.constructor && this.compareTo(other) === 0;\n  }\n\n}\n/**\n * A slash-separated path for navigating resources within the current Firestore\n * instance.\n *\n * @private\n */\n\n\nclass ResourcePath extends Path {\n  /**\n   * Constructs a ResourcePath.\n   *\n   * @private\n   * @param segments Sequence of names of the parts of the path.\n   */\n  constructor(...segments) {\n    super(segments);\n  }\n  /**\n   * Indicates whether this path points to a document.\n   * @private\n   */\n\n\n  get isDocument() {\n    return this.segments.length > 0 && this.segments.length % 2 === 0;\n  }\n  /**\n   * Indicates whether this path points to a collection.\n   * @private\n   */\n\n\n  get isCollection() {\n    return this.segments.length % 2 === 1;\n  }\n  /**\n   * The last component of the path.\n   * @private\n   */\n\n\n  get id() {\n    if (this.segments.length > 0) {\n      return this.segments[this.segments.length - 1];\n    }\n\n    return null;\n  }\n  /**\n   * Returns the location of this path relative to the root of the project's\n   * database.\n   * @private\n   */\n\n\n  get relativeName() {\n    return this.segments.join('/');\n  }\n  /**\n   * Constructs a new instance of ResourcePath.\n   *\n   * @private\n   * @param segments Sequence of parts of the path.\n   * @returns The newly created ResourcePath.\n   */\n\n\n  construct(segments) {\n    return new ResourcePath(...segments);\n  }\n  /**\n   * Splits a string into path segments, using slashes as separators.\n   *\n   * @private\n   * @param relativePath The path to split.\n   * @returns The split path segments.\n   */\n\n\n  split(relativePath) {\n    // We may have an empty segment at the beginning or end if they had a\n    // leading or trailing slash (which we allow).\n    return relativePath.split('/').filter(segment => segment.length > 0);\n  }\n  /**\n   * Converts this path to a fully qualified ResourcePath.\n   *\n   * @private\n   * @param projectIdIfMissing The project ID of the current Firestore project.\n   * The project ID is only used if it's not provided as part of this\n   * ResourcePath.\n   * @return A fully-qualified resource path pointing to the same element.\n   */\n\n\n  toQualifiedResourcePath(projectIdIfMissing) {\n    return new QualifiedResourcePath(projectIdIfMissing, exports.DEFAULT_DATABASE_ID, ...this.segments);\n  }\n\n}\n/**\n * A default instance pointing to the root collection.\n * @private\n */\n\n\nResourcePath.EMPTY = new ResourcePath();\nexports.ResourcePath = ResourcePath;\n/**\n * A slash-separated path that includes a project and database ID for referring\n * to resources in any Firestore project.\n *\n * @private\n */\n\nclass QualifiedResourcePath extends ResourcePath {\n  /**\n   * Constructs a Firestore Resource Path.\n   *\n   * @private\n   * @param projectId The Firestore project id.\n   * @param databaseId The Firestore database id.\n   * @param segments Sequence of names of the parts of the path.\n   */\n  constructor(projectId, databaseId, ...segments) {\n    super(...segments);\n    this.projectId = projectId;\n    this.databaseId = databaseId;\n  }\n  /**\n   * String representation of the path relative to the database root.\n   * @private\n   */\n\n\n  get relativeName() {\n    return this.segments.join('/');\n  }\n  /**\n   * Creates a resource path from an absolute Firestore path.\n   *\n   * @private\n   * @param absolutePath A string representation of a Resource Path.\n   * @returns The new ResourcePath.\n   */\n\n\n  static fromSlashSeparatedString(absolutePath) {\n    const elements = RESOURCE_PATH_RE.exec(absolutePath);\n\n    if (elements) {\n      const project = elements[1];\n      const database = elements[2];\n      const path = elements[3];\n      return new QualifiedResourcePath(project, database).append(path);\n    }\n\n    throw new Error(\"Resource name '\".concat(absolutePath, \"' is not valid.\"));\n  }\n  /**\n   * Create a child path beneath the current level.\n   *\n   * @private\n   * @param relativePath Relative path to append to the current path.\n   * @returns The new path.\n   */\n\n\n  append(relativePath) {\n    // `super.append()` calls `QualifiedResourcePath.construct()` when invoked\n    // from here and returns a QualifiedResourcePath.\n    return super.append(relativePath);\n  }\n  /**\n   * Create a child path beneath the current level.\n   *\n   * @private\n   * @returns The new path.\n   */\n\n\n  parent() {\n    return super.parent();\n  }\n  /**\n   * String representation of a ResourcePath as expected by the API.\n   *\n   * @private\n   * @returns The representation as expected by the API.\n   */\n\n\n  get formattedName() {\n    const components = ['projects', this.projectId, 'databases', this.databaseId, 'documents', ...this.segments];\n    return components.join('/');\n  }\n  /**\n   * Constructs a new instance of ResourcePath. We need this instead of using\n   * the normal constructor because polymorphic 'this' doesn't work on static\n   * methods.\n   *\n   * @private\n   * @param segments Sequence of names of the parts of the path.\n   * @returns The newly created QualifiedResourcePath.\n   */\n\n\n  construct(segments) {\n    return new QualifiedResourcePath(this.projectId, this.databaseId, ...segments);\n  }\n  /**\n   * Convenience method to match the ResourcePath API. This method always\n   * returns the current instance. The arguments is ignored.\n   *\n   * @param projectIdIfMissing The project ID of the current Firestore project.\n   * The project ID is only used if it's not provided as part of this\n   * ResourcePath.\n   * @private\n   */\n\n\n  toQualifiedResourcePath(projectIdIfMissing) {\n    return this;\n  }\n  /**\n   * Compare the current path against another ResourcePath object.\n   *\n   * @private\n   * @param other The path to compare to.\n   * @returns -1 if current < other, 1 if current > other, 0 if equal\n   */\n\n\n  compareTo(other) {\n    if (other instanceof QualifiedResourcePath) {\n      if (this.projectId < other.projectId) {\n        return -1;\n      }\n\n      if (this.projectId > other.projectId) {\n        return 1;\n      }\n\n      if (this.databaseId < other.databaseId) {\n        return -1;\n      }\n\n      if (this.databaseId > other.databaseId) {\n        return 1;\n      }\n    }\n\n    return super.compareTo(other);\n  }\n  /**\n   * Converts this ResourcePath to the Firestore Proto representation.\n   * @private\n   */\n\n\n  toProto() {\n    return {\n      referenceValue: this.formattedName\n    };\n  }\n\n}\n\nexports.QualifiedResourcePath = QualifiedResourcePath;\n/**\n * Validates that the given string can be used as a relative or absolute\n * resource path.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param resourcePath The path to validate.\n * @throws if the string can't be used as a resource path.\n */\n\nfunction validateResourcePath(arg, resourcePath) {\n  if (typeof resourcePath !== 'string' || resourcePath === '') {\n    throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'resource path'), \" Path must be a non-empty string.\"));\n  }\n\n  if (resourcePath.indexOf('//') >= 0) {\n    throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'resource path'), \" Paths must not contain //.\"));\n  }\n}\n\nexports.validateResourcePath = validateResourcePath;\n/**\n * A dot-separated path for navigating sub-objects within a document.\n *\n * @class\n */\n\nclass FieldPath extends Path {\n  /**\n   * Constructs a Firestore Field Path.\n   *\n   * @param {...string} segments Sequence of field names that form this path.\n   *\n   * @example\n   * let query = firestore.collection('col');\n   * let fieldPath = new FieldPath('f.o.o', 'bar');\n   *\n   * query.where(fieldPath, '==', 42).get().then(snapshot => {\n   *   snapshot.forEach(document => {\n   *     console.log(`Document contains {'f.o.o' : {'bar' : 42}}`);\n   *   });\n   * });\n   */\n  constructor(...segments) {\n    if (Array.isArray(segments[0])) {\n      throw new Error('The FieldPath constructor no longer supports an array as its first argument. ' + 'Please unpack your array and call FieldPath() with individual arguments.');\n    }\n\n    validate_1.validateMinNumberOfArguments('FieldPath', segments, 1);\n\n    for (let i = 0; i < segments.length; ++i) {\n      validate_1.validateString(i, segments[i]);\n\n      if (segments[i].length === 0) {\n        throw new Error(\"Element at index \".concat(i, \" should not be an empty string.\"));\n      }\n    }\n\n    super(segments);\n  }\n  /**\n   * A special FieldPath value to refer to the ID of a document. It can be used\n   * in queries to sort or filter by the document ID.\n   *\n   * @returns {FieldPath}\n   */\n\n\n  static documentId() {\n    return FieldPath._DOCUMENT_ID;\n  }\n  /**\n   * Turns a field path argument into a [FieldPath]{@link FieldPath}.\n   * Supports FieldPaths as input (which are passed through) and dot-separated\n   * strings.\n   *\n   * @private\n   * @param {string|FieldPath} fieldPath The FieldPath to create.\n   * @returns {FieldPath} A field path representation.\n   */\n\n\n  static fromArgument(fieldPath) {\n    // validateFieldPath() is used in all public API entry points to validate\n    // that fromArgument() is only called with a Field Path or a string.\n    return fieldPath instanceof FieldPath ? fieldPath : new FieldPath(...fieldPath.split('.'));\n  }\n  /**\n   * String representation of a FieldPath as expected by the API.\n   *\n   * @private\n   * @override\n   * @returns {string} The representation as expected by the API.\n   */\n\n\n  get formattedName() {\n    return this.segments.map(str => {\n      return UNESCAPED_FIELD_NAME_RE.test(str) ? str : '`' + str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`') + '`';\n    }).join('.');\n  }\n  /**\n   * Returns a string representation of this path.\n   *\n   * @private\n   * @returns A string representing this path.\n   */\n\n\n  toString() {\n    return this.formattedName;\n  }\n  /**\n   * Splits a string into path segments, using dots as separators.\n   *\n   * @private\n   * @override\n   * @param {string} fieldPath The path to split.\n   * @returns {Array.<string>} - The split path segments.\n   */\n\n\n  split(fieldPath) {\n    return fieldPath.split('.');\n  }\n  /**\n   * Constructs a new instance of FieldPath. We need this instead of using\n   * the normal constructor because polymorphic 'this' doesn't work on static\n   * methods.\n   *\n   * @private\n   * @override\n   * @param segments Sequence of field names.\n   * @returns The newly created FieldPath.\n   */\n\n\n  construct(segments) {\n    return new FieldPath(...segments);\n  }\n  /**\n   * Returns true if this `FieldPath` is equal to the provided value.\n   *\n   * @param {*} other The value to compare against.\n   * @return {boolean} true if this `FieldPath` is equal to the provided value.\n   */\n\n\n  isEqual(other) {\n    return super.isEqual(other);\n  }\n\n}\n/**\n * A special sentinel value to refer to the ID of a document.\n *\n * @private\n */\n\n\nFieldPath._DOCUMENT_ID = new FieldPath('__name__');\nexports.FieldPath = FieldPath;\n/**\n * Validates that the provided value can be used as a field path argument.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param fieldPath The value to verify.\n * @throws if the string can't be used as a field path.\n */\n\nfunction validateFieldPath(arg, fieldPath) {\n  if (fieldPath instanceof FieldPath) {\n    return;\n  }\n\n  if (fieldPath === undefined) {\n    throw new Error(validate_1.invalidArgumentMessage(arg, 'field path') + ' The path cannot be omitted.');\n  }\n\n  if (util_1.isObject(fieldPath) && fieldPath.constructor.name === 'FieldPath') {\n    throw new Error(validate_1.customObjectMessage(arg, fieldPath));\n  }\n\n  if (typeof fieldPath !== 'string') {\n    throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'field path'), \" Paths can only be specified as strings or via a FieldPath object.\"));\n  }\n\n  if (fieldPath.indexOf('..') >= 0) {\n    throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'field path'), \" Paths must not contain \\\"..\\\" in them.\"));\n  }\n\n  if (fieldPath.startsWith('.') || fieldPath.endsWith('.')) {\n    throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'field path'), \" Paths must not start or end with \\\".\\\".\"));\n  }\n\n  if (!FIELD_PATH_RE.test(fieldPath)) {\n    throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'field path'), \" Paths can't be empty and must not contain\\n    \\\"*~/[]\\\".\"));\n  }\n}\n\nexports.validateFieldPath = validateFieldPath;","map":null,"metadata":{},"sourceType":"script"}