{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\md_sh\\\\OneDrive\\\\Desktop\\\\verycoolmathgames.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst constants_1 = require(\"./constants\");\n\nconst filter_1 = require(\"./filter\");\n\nconst units = [['m', 1], ['S', 1000], ['M', 60 * 1000], ['H', 60 * 60 * 1000]];\n\nfunction getDeadline(deadline) {\n  const now = new Date().getTime();\n  const timeoutMs = Math.max(deadline - now, 0);\n\n  for (const _ref of units) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    const unit = _ref2[0];\n    const factor = _ref2[1];\n    const amount = timeoutMs / factor;\n\n    if (amount < 1e8) {\n      return String(Math.ceil(amount)) + unit;\n    }\n  }\n\n  throw new Error('Deadline is too far in the future');\n}\n\nclass DeadlineFilter extends filter_1.BaseFilter {\n  constructor(channel, callStream) {\n    super();\n    this.channel = channel;\n    this.callStream = callStream;\n    this.timer = null;\n    const callDeadline = callStream.getDeadline();\n\n    if (callDeadline instanceof Date) {\n      this.deadline = callDeadline.getTime();\n    } else {\n      this.deadline = callDeadline;\n    }\n\n    const now = new Date().getTime();\n    let timeout = this.deadline - now;\n\n    if (timeout < 0) {\n      timeout = 0;\n    }\n\n    if (this.deadline !== Infinity) {\n      this.timer = setTimeout(() => {\n        callStream.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, 'Deadline exceeded');\n      }, timeout);\n      callStream.on('status', () => clearTimeout(this.timer));\n    }\n  }\n\n  async sendMetadata(metadata) {\n    if (this.deadline === Infinity) {\n      return metadata;\n    }\n    /* The input metadata promise depends on the original channel.connect()\n     * promise, so when it is complete that implies that the channel is\n     * connected */\n\n\n    const finalMetadata = await metadata;\n    const timeoutString = getDeadline(this.deadline);\n    finalMetadata.set('grpc-timeout', timeoutString);\n    return finalMetadata;\n  }\n\n}\n\nexports.DeadlineFilter = DeadlineFilter;\n\nclass DeadlineFilterFactory {\n  constructor(channel) {\n    this.channel = channel;\n  }\n\n  createFilter(callStream) {\n    return new DeadlineFilter(this.channel, callStream);\n  }\n\n}\n\nexports.DeadlineFilterFactory = DeadlineFilterFactory;","map":null,"metadata":{},"sourceType":"script"}