{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst os = require('os');\n\nconst fs = require('graceful-fs');\n\nconst makeDir = require('make-dir');\n\nconst xdgBasedir = require('xdg-basedir');\n\nconst writeFileAtomic = require('write-file-atomic');\n\nconst dotProp = require('dot-prop');\n\nconst uniqueString = require('unique-string');\n\nconst configDir = xdgBasedir.config || path.join(os.tmpdir(), uniqueString());\nconst permissionError = 'You don\\'t have access to this file.';\nconst makeDirOptions = {\n  mode: 0o0700\n};\nconst writeFileOptions = {\n  mode: 0o0600\n};\n\nclass Configstore {\n  constructor(id, defaults, options = {}) {\n    const pathPrefix = options.globalConfigPath ? path.join(id, 'config.json') : path.join('configstore', \"\".concat(id, \".json\"));\n    this.path = options.configPath || path.join(configDir, pathPrefix);\n\n    if (defaults) {\n      this.all = Object.assign({}, defaults, this.all);\n    }\n  }\n\n  get all() {\n    try {\n      return JSON.parse(fs.readFileSync(this.path, 'utf8'));\n    } catch (error) {\n      // Create directory if it doesn't exist\n      if (error.code === 'ENOENT') {\n        return {};\n      } // Improve the message of permission errors\n\n\n      if (error.code === 'EACCES') {\n        error.message = \"\".concat(error.message, \"\\n\").concat(permissionError, \"\\n\");\n      } // Empty the file if it encounters invalid JSON\n\n\n      if (error.name === 'SyntaxError') {\n        writeFileAtomic.sync(this.path, '', writeFileOptions);\n        return {};\n      }\n\n      throw error;\n    }\n  }\n\n  set all(value) {\n    try {\n      // Make sure the folder exists as it could have been deleted in the meantime\n      makeDir.sync(path.dirname(this.path), makeDirOptions);\n      writeFileAtomic.sync(this.path, JSON.stringify(value, null, '\\t'), writeFileOptions);\n    } catch (error) {\n      // Improve the message of permission errors\n      if (error.code === 'EACCES') {\n        error.message = \"\".concat(error.message, \"\\n\").concat(permissionError, \"\\n\");\n      }\n\n      throw error;\n    }\n  }\n\n  get size() {\n    return Object.keys(this.all || {}).length;\n  }\n\n  get(key) {\n    return dotProp.get(this.all, key);\n  }\n\n  set(key, value) {\n    const config = this.all;\n\n    if (arguments.length === 1) {\n      for (const k of Object.keys(key)) {\n        dotProp.set(config, k, key[k]);\n      }\n    } else {\n      dotProp.set(config, key, value);\n    }\n\n    this.all = config;\n  }\n\n  has(key) {\n    return dotProp.has(this.all, key);\n  }\n\n  delete(key) {\n    const config = this.all;\n    dotProp.delete(config, key);\n    this.all = config;\n  }\n\n  clear() {\n    this.all = {};\n  }\n\n}\n\nmodule.exports = Configstore;","map":null,"metadata":{},"sourceType":"script"}