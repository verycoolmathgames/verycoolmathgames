{"ast":null,"code":"// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n'use strict';\n\nconst gapicConfig = require('./firestore_admin_client_config.json');\n\nconst gax = require('google-gax');\n\nconst path = require('path');\n\nconst VERSION = require('../../../package.json').version;\n/**\n * Operations are created by service `FirestoreAdmin`, but are accessed via\n * service `google.longrunning.Operations`.\n *\n * @class\n * @memberof v1\n */\n\n\nclass FirestoreAdminClient {\n  /**\n   * Construct an instance of FirestoreAdminClient.\n   *\n   * @param {object} [options] - The configuration object. See the subsequent\n   *   parameters for more details.\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {function} [options.promise] - Custom promise module to use instead\n   *     of native Promises.\n   * @param {string} [options.servicePath] - The domain name of the\n   *     API remote host.\n   */\n  constructor(opts) {\n    opts = opts || {};\n    this._descriptors = {};\n    const servicePath = opts.servicePath || opts.apiEndpoint || this.constructor.servicePath; // Ensure that options include the service address and port.\n\n    opts = Object.assign({\n      clientConfig: {},\n      port: this.constructor.port,\n      servicePath\n    }, opts); // Create a `gaxGrpc` object, with any grpc-specific options\n    // sent to the client.\n\n    opts.scopes = this.constructor.scopes;\n    const gaxGrpc = new gax.GrpcClient(opts); // Save the auth object to the client, for use by other methods.\n\n    this.auth = gaxGrpc.auth; // Determine the client header string.\n\n    const clientHeader = [\"gl-node/\".concat(process.version), \"grpc/\".concat(gaxGrpc.grpcVersion), \"gax/\".concat(gax.version), \"gapic/\".concat(VERSION)];\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(\"\".concat(opts.libName, \"/\").concat(opts.libVersion));\n    } // Load the applicable protos.\n\n\n    const protos = gaxGrpc.loadProto(path.join(__dirname, '..', '..', 'protos'), ['google/firestore/admin/v1/firestore_admin.proto']); // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n\n    this._pathTemplates = {\n      databasePathTemplate: new gax.PathTemplate('projects/{project}/databases/{database}'),\n      fieldPathTemplate: new gax.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection_id}/fields/{field_id}'),\n      indexPathTemplate: new gax.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection_id}/indexes/{index_id}'),\n      parentPathTemplate: new gax.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection_id}')\n    }; // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this._descriptors.page = {\n      listIndexes: new gax.PageDescriptor('pageToken', 'nextPageToken', 'indexes'),\n      listFields: new gax.PageDescriptor('pageToken', 'nextPageToken', 'fields')\n    }; // Put together the default options sent with requests.\n\n    const defaults = gaxGrpc.constructSettings('google.firestore.admin.v1.FirestoreAdmin', gapicConfig, opts.clientConfig, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this._innerApiCalls = {}; // Put together the \"service stub\" for\n    // google.firestore.admin.v1.FirestoreAdmin.\n\n    const firestoreAdminStub = gaxGrpc.createStub(protos.google.firestore.admin.v1.FirestoreAdmin, opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const firestoreAdminStubMethods = ['createIndex', 'listIndexes', 'getIndex', 'deleteIndex', 'importDocuments', 'exportDocuments', 'getField', 'listFields', 'updateField'];\n\n    for (const methodName of firestoreAdminStubMethods) {\n      this._innerApiCalls[methodName] = gax.createApiCall(firestoreAdminStub.then(stub => function () {\n        const args = Array.prototype.slice.call(arguments, 0);\n        return stub[methodName].apply(stub, args);\n      }, err => function () {\n        throw err;\n      }), defaults[methodName], this._descriptors.page[methodName]);\n    }\n  }\n  /**\n   * The DNS address for this API service.\n   */\n\n\n  static get servicePath() {\n    return 'firestore.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   */\n\n\n  static get apiEndpoint() {\n    return 'firestore.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/datastore'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @param {function(Error, string)} callback - the callback to\n   *   be called with the current project Id.\n   */\n\n\n  getProjectId(callback) {\n    return this.auth.getProjectId(callback);\n  } // -------------------\n  // -- Service calls --\n  // -------------------\n\n  /**\n   * Creates a composite index. This returns a google.longrunning.Operation\n   * which may be used to track the status of the creation. The metadata for\n   * the operation will be the type IndexOperationMetadata.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   A parent name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n   * @param {Object} request.index\n   *   The composite index to create.\n   *\n   *   This object should have the same structure as [Index]{@link google.firestore.admin.v1.Index}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Operation]{@link google.longrunning.Operation}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const firestore = require('@google-cloud/firestore');\n   *\n   * const client = new firestore.v1.FirestoreAdminClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedParent = client.parentPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]');\n   * const index = {};\n   * const request = {\n   *   parent: formattedParent,\n   *   index: index,\n   * };\n   * client.createIndex(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  createIndex(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent\n    });\n    return this._innerApiCalls.createIndex(request, options, callback);\n  }\n  /**\n   * Lists composite indexes.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   A parent name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n   * @param {string} [request.filter]\n   *   The filter to apply to list results.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of [Index]{@link google.firestore.admin.v1.Index}.\n   *\n   *   When autoPaginate: false is specified through options, it contains the result\n   *   in a single response. If the response indicates the next page exists, the third\n   *   parameter is set to be used for the next request object. The fourth parameter keeps\n   *   the raw response object of an object representing [ListIndexesResponse]{@link google.firestore.admin.v1.ListIndexesResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Index]{@link google.firestore.admin.v1.Index}.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of [Index]{@link google.firestore.admin.v1.Index} in a single response.\n   *   The second element is the next request object if the response\n   *   indicates the next page exists, or null. The third element is\n   *   an object representing [ListIndexesResponse]{@link google.firestore.admin.v1.ListIndexesResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const firestore = require('@google-cloud/firestore');\n   *\n   * const client = new firestore.v1.FirestoreAdminClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * // Iterate over all elements.\n   * const formattedParent = client.parentPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]');\n   *\n   * client.listIndexes({parent: formattedParent})\n   *   .then(responses => {\n   *     const resources = responses[0];\n   *     for (const resource of resources) {\n   *       // doThingsWith(resource)\n   *     }\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * // Or obtain the paged response.\n   * const formattedParent = client.parentPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]');\n   *\n   *\n   * const options = {autoPaginate: false};\n   * const callback = responses => {\n   *   // The actual resources in a response.\n   *   const resources = responses[0];\n   *   // The next request if the response shows that there are more responses.\n   *   const nextRequest = responses[1];\n   *   // The actual response object, if necessary.\n   *   // const rawResponse = responses[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   *   if (nextRequest) {\n   *     // Fetch the next page.\n   *     return client.listIndexes(nextRequest, options).then(callback);\n   *   }\n   * }\n   * client.listIndexes({parent: formattedParent}, options)\n   *   .then(callback)\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  listIndexes(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent\n    });\n    return this._innerApiCalls.listIndexes(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listIndexes}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listIndexes} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   A parent name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n   * @param {string} [request.filter]\n   *   The filter to apply to list results.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Index]{@link google.firestore.admin.v1.Index} on 'data' event.\n   *\n   * @example\n   *\n   * const firestore = require('@google-cloud/firestore');\n   *\n   * const client = new firestore.v1.FirestoreAdminClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedParent = client.parentPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]');\n   * client.listIndexesStream({parent: formattedParent})\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   }).on('error', err => {\n   *     console.log(err);\n   *   });\n   */\n\n\n  listIndexesStream(request, options) {\n    options = options || {};\n    return this._descriptors.page.listIndexes.createStream(this._innerApiCalls.listIndexes, request, options);\n  }\n  /**\n   * Gets a composite index.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   A name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Index]{@link google.firestore.admin.v1.Index}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Index]{@link google.firestore.admin.v1.Index}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const firestore = require('@google-cloud/firestore');\n   *\n   * const client = new firestore.v1.FirestoreAdminClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedName = client.indexPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]', '[INDEX_ID]');\n   * client.getIndex({name: formattedName})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  getIndex(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name\n    });\n    return this._innerApiCalls.getIndex(request, options, callback);\n  }\n  /**\n   * Deletes a composite index.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   A name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error)} [callback]\n   *   The function which will be called with the result of the API call.\n   * @returns {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const firestore = require('@google-cloud/firestore');\n   *\n   * const client = new firestore.v1.FirestoreAdminClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedName = client.indexPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]', '[INDEX_ID]');\n   * client.deleteIndex({name: formattedName}).catch(err => {\n   *   console.error(err);\n   * });\n   */\n\n\n  deleteIndex(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name\n    });\n    return this._innerApiCalls.deleteIndex(request, options, callback);\n  }\n  /**\n   * Imports documents into Google Cloud Firestore. Existing documents with the\n   * same name are overwritten. The import occurs in the background and its\n   * progress can be monitored and managed via the Operation resource that is\n   * created. If an ImportDocuments operation is cancelled, it is possible\n   * that a subset of the data has already been imported to Cloud Firestore.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Database to import into. Should be of the form:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {string[]} [request.collectionIds]\n   *   Which collection ids to import. Unspecified means all collections included\n   *   in the import.\n   * @param {string} [request.inputUriPrefix]\n   *   Location of the exported files.\n   *   This must match the output_uri_prefix of an ExportDocumentsResponse from\n   *   an export that has completed successfully.\n   *   See:\n   *   google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Operation]{@link google.longrunning.Operation}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const firestore = require('@google-cloud/firestore');\n   *\n   * const client = new firestore.v1.FirestoreAdminClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedName = client.databasePath('[PROJECT]', '[DATABASE]');\n   * client.importDocuments({name: formattedName})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  importDocuments(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name\n    });\n    return this._innerApiCalls.importDocuments(request, options, callback);\n  }\n  /**\n   * Exports a copy of all or a subset of documents from Google Cloud Firestore\n   * to another storage system, such as Google Cloud Storage. Recent updates to\n   * documents may not be reflected in the export. The export occurs in the\n   * background and its progress can be monitored and managed via the\n   * Operation resource that is created. The output of an export may only be\n   * used once the associated operation is done. If an export operation is\n   * cancelled before completion it may leave partial data behind in Google\n   * Cloud Storage.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Database to export. Should be of the form:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {string[]} [request.collectionIds]\n   *   Which collection ids to export. Unspecified means all collections.\n   * @param {string} [request.outputUriPrefix]\n   *   The output URI. Currently only supports Google Cloud Storage URIs of the\n   *   form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name\n   *   of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional\n   *   Google Cloud Storage namespace path. When\n   *   choosing a name, be sure to consider Google Cloud Storage naming\n   *   guidelines: https://cloud.google.com/storage/docs/naming.\n   *   If the URI is a bucket (without a namespace path), a prefix will be\n   *   generated based on the start time.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Operation]{@link google.longrunning.Operation}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const firestore = require('@google-cloud/firestore');\n   *\n   * const client = new firestore.v1.FirestoreAdminClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedName = client.databasePath('[PROJECT]', '[DATABASE]');\n   * client.exportDocuments({name: formattedName})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  exportDocuments(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name\n    });\n    return this._innerApiCalls.exportDocuments(request, options, callback);\n  }\n  /**\n   * Gets the metadata and configuration for a Field.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   A name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Field]{@link google.firestore.admin.v1.Field}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Field]{@link google.firestore.admin.v1.Field}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const firestore = require('@google-cloud/firestore');\n   *\n   * const client = new firestore.v1.FirestoreAdminClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedName = client.fieldPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]', '[FIELD_ID]');\n   * client.getField({name: formattedName})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  getField(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name\n    });\n    return this._innerApiCalls.getField(request, options, callback);\n  }\n  /**\n   * Lists the field configuration and metadata for this database.\n   *\n   * Currently, FirestoreAdmin.ListFields only supports listing fields\n   * that have been explicitly overridden. To issue this query, call\n   * FirestoreAdmin.ListFields with the filter set to\n   * `indexConfig.usesAncestorConfig:false`.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   A parent name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n   * @param {string} [request.filter]\n   *   The filter to apply to list results. Currently,\n   *   FirestoreAdmin.ListFields only supports listing fields\n   *   that have been explicitly overridden. To issue this query, call\n   *   FirestoreAdmin.ListFields with the filter set to\n   *   `indexConfig.usesAncestorConfig:false`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of [Field]{@link google.firestore.admin.v1.Field}.\n   *\n   *   When autoPaginate: false is specified through options, it contains the result\n   *   in a single response. If the response indicates the next page exists, the third\n   *   parameter is set to be used for the next request object. The fourth parameter keeps\n   *   the raw response object of an object representing [ListFieldsResponse]{@link google.firestore.admin.v1.ListFieldsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Field]{@link google.firestore.admin.v1.Field}.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of [Field]{@link google.firestore.admin.v1.Field} in a single response.\n   *   The second element is the next request object if the response\n   *   indicates the next page exists, or null. The third element is\n   *   an object representing [ListFieldsResponse]{@link google.firestore.admin.v1.ListFieldsResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const firestore = require('@google-cloud/firestore');\n   *\n   * const client = new firestore.v1.FirestoreAdminClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * // Iterate over all elements.\n   * const formattedParent = client.parentPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]');\n   *\n   * client.listFields({parent: formattedParent})\n   *   .then(responses => {\n   *     const resources = responses[0];\n   *     for (const resource of resources) {\n   *       // doThingsWith(resource)\n   *     }\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * // Or obtain the paged response.\n   * const formattedParent = client.parentPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]');\n   *\n   *\n   * const options = {autoPaginate: false};\n   * const callback = responses => {\n   *   // The actual resources in a response.\n   *   const resources = responses[0];\n   *   // The next request if the response shows that there are more responses.\n   *   const nextRequest = responses[1];\n   *   // The actual response object, if necessary.\n   *   // const rawResponse = responses[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   *   if (nextRequest) {\n   *     // Fetch the next page.\n   *     return client.listFields(nextRequest, options).then(callback);\n   *   }\n   * }\n   * client.listFields({parent: formattedParent}, options)\n   *   .then(callback)\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  listFields(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent\n    });\n    return this._innerApiCalls.listFields(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listFields}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listFields} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   A parent name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n   * @param {string} [request.filter]\n   *   The filter to apply to list results. Currently,\n   *   FirestoreAdmin.ListFields only supports listing fields\n   *   that have been explicitly overridden. To issue this query, call\n   *   FirestoreAdmin.ListFields with the filter set to\n   *   `indexConfig.usesAncestorConfig:false`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Field]{@link google.firestore.admin.v1.Field} on 'data' event.\n   *\n   * @example\n   *\n   * const firestore = require('@google-cloud/firestore');\n   *\n   * const client = new firestore.v1.FirestoreAdminClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedParent = client.parentPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]');\n   * client.listFieldsStream({parent: formattedParent})\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   }).on('error', err => {\n   *     console.log(err);\n   *   });\n   */\n\n\n  listFieldsStream(request, options) {\n    options = options || {};\n    return this._descriptors.page.listFields.createStream(this._innerApiCalls.listFields, request, options);\n  }\n  /**\n   * Updates a field configuration. Currently, field updates apply only to\n   * single field index configuration. However, calls to\n   * FirestoreAdmin.UpdateField should provide a field mask to avoid\n   * changing any configuration that the caller isn't aware of. The field mask\n   * should be specified as: `{ paths: \"index_config\" }`.\n   *\n   * This call returns a google.longrunning.Operation which may be used to\n   * track the status of the field update. The metadata for\n   * the operation will be the type FieldOperationMetadata.\n   *\n   * To configure the default field settings for the database, use\n   * the special `Field` with resource name:\n   * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {Object} request.field\n   *   The field to be updated.\n   *\n   *   This object should have the same structure as [Field]{@link google.firestore.admin.v1.Field}\n   * @param {Object} [request.updateMask]\n   *   A mask, relative to the field. If specified, only configuration specified\n   *   by this field_mask will be updated in the field.\n   *\n   *   This object should have the same structure as [FieldMask]{@link google.protobuf.FieldMask}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Operation]{@link google.longrunning.Operation}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const firestore = require('@google-cloud/firestore');\n   *\n   * const client = new firestore.v1.FirestoreAdminClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const field = {};\n   * client.updateField({field: field})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  updateField(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      'field.name': request.field.name\n    });\n    return this._innerApiCalls.updateField(request, options, callback);\n  } // --------------------\n  // -- Path templates --\n  // --------------------\n\n  /**\n   * Return a fully-qualified database resource name string.\n   *\n   * @param {String} project\n   * @param {String} database\n   * @returns {String}\n   */\n\n\n  databasePath(project, database) {\n    return this._pathTemplates.databasePathTemplate.render({\n      project: project,\n      database: database\n    });\n  }\n  /**\n   * Return a fully-qualified field resource name string.\n   *\n   * @param {String} project\n   * @param {String} database\n   * @param {String} collectionId\n   * @param {String} fieldId\n   * @returns {String}\n   */\n\n\n  fieldPath(project, database, collectionId, fieldId) {\n    return this._pathTemplates.fieldPathTemplate.render({\n      project: project,\n      database: database,\n      collection_id: collectionId,\n      field_id: fieldId\n    });\n  }\n  /**\n   * Return a fully-qualified index resource name string.\n   *\n   * @param {String} project\n   * @param {String} database\n   * @param {String} collectionId\n   * @param {String} indexId\n   * @returns {String}\n   */\n\n\n  indexPath(project, database, collectionId, indexId) {\n    return this._pathTemplates.indexPathTemplate.render({\n      project: project,\n      database: database,\n      collection_id: collectionId,\n      index_id: indexId\n    });\n  }\n  /**\n   * Return a fully-qualified parent resource name string.\n   *\n   * @param {String} project\n   * @param {String} database\n   * @param {String} collectionId\n   * @returns {String}\n   */\n\n\n  parentPath(project, database, collectionId) {\n    return this._pathTemplates.parentPathTemplate.render({\n      project: project,\n      database: database,\n      collection_id: collectionId\n    });\n  }\n  /**\n   * Parse the databaseName from a database resource.\n   *\n   * @param {String} databaseName\n   *   A fully-qualified path representing a database resources.\n   * @returns {String} - A string representing the project.\n   */\n\n\n  matchProjectFromDatabaseName(databaseName) {\n    return this._pathTemplates.databasePathTemplate.match(databaseName).project;\n  }\n  /**\n   * Parse the databaseName from a database resource.\n   *\n   * @param {String} databaseName\n   *   A fully-qualified path representing a database resources.\n   * @returns {String} - A string representing the database.\n   */\n\n\n  matchDatabaseFromDatabaseName(databaseName) {\n    return this._pathTemplates.databasePathTemplate.match(databaseName).database;\n  }\n  /**\n   * Parse the fieldName from a field resource.\n   *\n   * @param {String} fieldName\n   *   A fully-qualified path representing a field resources.\n   * @returns {String} - A string representing the project.\n   */\n\n\n  matchProjectFromFieldName(fieldName) {\n    return this._pathTemplates.fieldPathTemplate.match(fieldName).project;\n  }\n  /**\n   * Parse the fieldName from a field resource.\n   *\n   * @param {String} fieldName\n   *   A fully-qualified path representing a field resources.\n   * @returns {String} - A string representing the database.\n   */\n\n\n  matchDatabaseFromFieldName(fieldName) {\n    return this._pathTemplates.fieldPathTemplate.match(fieldName).database;\n  }\n  /**\n   * Parse the fieldName from a field resource.\n   *\n   * @param {String} fieldName\n   *   A fully-qualified path representing a field resources.\n   * @returns {String} - A string representing the collection_id.\n   */\n\n\n  matchCollectionIdFromFieldName(fieldName) {\n    return this._pathTemplates.fieldPathTemplate.match(fieldName).collection_id;\n  }\n  /**\n   * Parse the fieldName from a field resource.\n   *\n   * @param {String} fieldName\n   *   A fully-qualified path representing a field resources.\n   * @returns {String} - A string representing the field_id.\n   */\n\n\n  matchFieldIdFromFieldName(fieldName) {\n    return this._pathTemplates.fieldPathTemplate.match(fieldName).field_id;\n  }\n  /**\n   * Parse the indexName from a index resource.\n   *\n   * @param {String} indexName\n   *   A fully-qualified path representing a index resources.\n   * @returns {String} - A string representing the project.\n   */\n\n\n  matchProjectFromIndexName(indexName) {\n    return this._pathTemplates.indexPathTemplate.match(indexName).project;\n  }\n  /**\n   * Parse the indexName from a index resource.\n   *\n   * @param {String} indexName\n   *   A fully-qualified path representing a index resources.\n   * @returns {String} - A string representing the database.\n   */\n\n\n  matchDatabaseFromIndexName(indexName) {\n    return this._pathTemplates.indexPathTemplate.match(indexName).database;\n  }\n  /**\n   * Parse the indexName from a index resource.\n   *\n   * @param {String} indexName\n   *   A fully-qualified path representing a index resources.\n   * @returns {String} - A string representing the collection_id.\n   */\n\n\n  matchCollectionIdFromIndexName(indexName) {\n    return this._pathTemplates.indexPathTemplate.match(indexName).collection_id;\n  }\n  /**\n   * Parse the indexName from a index resource.\n   *\n   * @param {String} indexName\n   *   A fully-qualified path representing a index resources.\n   * @returns {String} - A string representing the index_id.\n   */\n\n\n  matchIndexIdFromIndexName(indexName) {\n    return this._pathTemplates.indexPathTemplate.match(indexName).index_id;\n  }\n  /**\n   * Parse the parentName from a parent resource.\n   *\n   * @param {String} parentName\n   *   A fully-qualified path representing a parent resources.\n   * @returns {String} - A string representing the project.\n   */\n\n\n  matchProjectFromParentName(parentName) {\n    return this._pathTemplates.parentPathTemplate.match(parentName).project;\n  }\n  /**\n   * Parse the parentName from a parent resource.\n   *\n   * @param {String} parentName\n   *   A fully-qualified path representing a parent resources.\n   * @returns {String} - A string representing the database.\n   */\n\n\n  matchDatabaseFromParentName(parentName) {\n    return this._pathTemplates.parentPathTemplate.match(parentName).database;\n  }\n  /**\n   * Parse the parentName from a parent resource.\n   *\n   * @param {String} parentName\n   *   A fully-qualified path representing a parent resources.\n   * @returns {String} - A string representing the collection_id.\n   */\n\n\n  matchCollectionIdFromParentName(parentName) {\n    return this._pathTemplates.parentPathTemplate.match(parentName).collection_id;\n  }\n\n}\n\nmodule.exports = FirestoreAdminClient;","map":null,"metadata":{},"sourceType":"script"}