{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019, Google LLC\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst call_1 = require(\"../call\");\n\nconst googleError_1 = require(\"../googleError\");\n\nclass PagedApiCaller {\n  /**\n   * Creates an API caller that returns a stream to performs page-streaming.\n   *\n   * @private\n   * @constructor\n   * @param {PageDescriptor} pageDescriptor - indicates the structure\n   *   of page streaming to be performed.\n   */\n  constructor(pageDescriptor) {\n    this.pageDescriptor = pageDescriptor;\n  }\n\n  createActualCallback(request, callback) {\n    const self = this;\n    return function fetchNextPageToken(err, response) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      if (!response) {\n        callback(new googleError_1.GoogleError('Undefined response in pagination method callback.'));\n        return;\n      }\n\n      const resources = response[self.pageDescriptor.resourceField];\n      const pageToken = response[self.pageDescriptor.responsePageTokenField];\n\n      if (pageToken) {\n        request[self.pageDescriptor.requestPageTokenField] = pageToken;\n        callback(err, resources, request, response);\n      } else {\n        callback(err, resources, null, response);\n      }\n    };\n  }\n\n  wrap(func) {\n    const self = this;\n    return function wrappedCall(argument, metadata, options, callback) {\n      return func(argument, metadata, options, self.createActualCallback(argument, callback));\n    };\n  }\n\n  init(settings, callback) {\n    if (callback) {\n      return new call_1.OngoingCall(callback);\n    }\n\n    return new call_1.OngoingCallPromise(settings.promise);\n  }\n\n  call(apiCall, argument, settings, canceller) {\n    argument = Object.assign({}, argument);\n\n    if (settings.pageToken) {\n      argument[this.pageDescriptor.requestPageTokenField] = settings.pageToken;\n    }\n\n    if (settings.pageSize) {\n      argument[this.pageDescriptor.requestPageSizeField] = settings.pageSize;\n    }\n\n    if (!settings.autoPaginate) {\n      // they don't want auto-pagination this time - okay, just call once\n      canceller.call(apiCall, argument);\n      return;\n    }\n\n    const maxResults = settings.maxResults || -1;\n    const allResources = [];\n\n    function pushResources(err, resources, next) {\n      if (err) {\n        canceller.callback(err);\n        return;\n      }\n\n      for (let i = 0; i < resources.length; ++i) {\n        allResources.push(resources[i]);\n\n        if (allResources.length === maxResults) {\n          next = null;\n          break;\n        }\n      }\n\n      if (!next) {\n        canceller.callback(null, allResources);\n        return;\n      }\n\n      setImmediate(apiCall, next, pushResources);\n    }\n\n    setImmediate(apiCall, argument, pushResources);\n  }\n\n  fail(canceller, err) {\n    canceller.callback(err);\n  }\n\n  result(canceller) {\n    return canceller.promise;\n  }\n\n}\n\nexports.PagedApiCaller = PagedApiCaller;","map":null,"metadata":{},"sourceType":"script"}