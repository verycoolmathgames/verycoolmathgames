{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass ServerCredentials {\n  static createInsecure() {\n    return new InsecureServerCredentials();\n  }\n\n  static createSsl(rootCerts, keyCertPairs, checkClientCertificate = false) {\n    if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) {\n      throw new TypeError('rootCerts must be null or a Buffer');\n    }\n\n    if (!Array.isArray(keyCertPairs)) {\n      throw new TypeError('keyCertPairs must be an array');\n    }\n\n    if (typeof checkClientCertificate !== 'boolean') {\n      throw new TypeError('checkClientCertificate must be a boolean');\n    }\n\n    const cert = [];\n    const key = [];\n\n    for (let i = 0; i < keyCertPairs.length; i++) {\n      const pair = keyCertPairs[i];\n\n      if (pair === null || typeof pair !== 'object') {\n        throw new TypeError(\"keyCertPair[\".concat(i, \"] must be an object\"));\n      }\n\n      if (!Buffer.isBuffer(pair.private_key)) {\n        throw new TypeError(\"keyCertPair[\".concat(i, \"].private_key must be a Buffer\"));\n      }\n\n      if (!Buffer.isBuffer(pair.cert_chain)) {\n        throw new TypeError(\"keyCertPair[\".concat(i, \"].cert_chain must be a Buffer\"));\n      }\n\n      cert.push(pair.cert_chain);\n      key.push(pair.private_key);\n    }\n\n    return new SecureServerCredentials({\n      ca: rootCerts || undefined,\n      cert,\n      key,\n      requestCert: checkClientCertificate\n    });\n  }\n\n}\n\nexports.ServerCredentials = ServerCredentials;\n\nclass InsecureServerCredentials extends ServerCredentials {\n  _isSecure() {\n    return false;\n  }\n\n  _getSettings() {\n    return null;\n  }\n\n}\n\nclass SecureServerCredentials extends ServerCredentials {\n  constructor(options) {\n    super();\n    this.options = options;\n  }\n\n  _isSecure() {\n    return true;\n  }\n\n  _getSettings() {\n    return this.options;\n  }\n\n}","map":null,"metadata":{},"sourceType":"script"}