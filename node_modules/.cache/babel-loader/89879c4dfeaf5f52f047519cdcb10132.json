{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n\nconst arrify = require(\"arrify\");\n\nconst util_1 = require(\"./util\");\n/**\n * Get and set IAM policies for your Cloud Storage bucket.\n *\n * @see [Cloud Storage IAM Management](https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management)\n * @see [Granting, Changing, and Revoking Access](https://cloud.google.com/iam/docs/granting-changing-revoking-access)\n * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n *\n * @constructor Iam\n * @mixin\n *\n * @param {Bucket} bucket The parent instance.\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('my-bucket');\n * // bucket.iam\n */\n\n\nclass Iam {\n  constructor(bucket) {\n    this.request_ = bucket.request.bind(bucket);\n    this.resourceId_ = 'buckets/' + bucket.getId();\n  }\n  /**\n   * Get the IAM policy.\n   *\n   * @param {GetPolicyRequest} [options] Request options.\n   * @param {GetPolicyCallback} [callback] Callback function.\n   * @returns {Promise<GetPolicyResponse>}\n   *\n   * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/getIamPolicy}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('my-bucket');\n   * bucket.iam.getPolicy(function(err, policy, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.iam.getPolicy().then(function(data) {\n   *   const policy = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * @example <caption>include:samples/iam.js</caption>\n   * region_tag:storage_view_bucket_iam_members\n   * Example of retrieving a bucket's IAM policy:\n   */\n\n\n  getPolicy(optionsOrCallback, callback) {\n    const _util_1$normalize = util_1.normalize(optionsOrCallback, callback),\n          options = _util_1$normalize.options,\n          cb = _util_1$normalize.callback;\n\n    this.request_({\n      uri: '/iam',\n      qs: options\n    }, cb);\n  }\n  /**\n   * Set the IAM policy.\n   *\n   * @throws {Error} If no policy is provided.\n   *\n   * @param {Policy} policy The policy.\n   * @param {SetPolicyOptions} [options] Configuration opbject.\n   * @param {SetPolicyCallback} callback Callback function.\n   * @returns {Promise<SetPolicyResponse>}\n   *\n   * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/setIamPolicy}\n   * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('my-bucket');\n   *\n   * const myPolicy = {\n   *   bindings: [\n   *     {\n   *       role: 'roles/storage.admin',\n   *       members:\n   * ['serviceAccount:myotherproject@appspot.gserviceaccount.com']\n   *     }\n   *   ]\n   * };\n   *\n   * bucket.iam.setPolicy(myPolicy, function(err, policy, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.iam.setPolicy(myPolicy).then(function(data) {\n   *   const policy = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * @example <caption>include:samples/iam.js</caption>\n   * region_tag:storage_add_bucket_iam_member\n   * Example of adding to a bucket's IAM policy:\n   *\n   * @example <caption>include:samples/iam.js</caption>\n   * region_tag:storage_remove_bucket_iam_member\n   * Example of removing from a bucket's IAM policy:\n   */\n\n\n  setPolicy(policy, optionsOrCallback, callback) {\n    if (policy === null || typeof policy !== 'object') {\n      throw new Error('A policy object is required.');\n    }\n\n    const _util_1$normalize2 = util_1.normalize(optionsOrCallback, callback),\n          options = _util_1$normalize2.options,\n          cb = _util_1$normalize2.callback;\n\n    this.request_({\n      method: 'PUT',\n      uri: '/iam',\n      json: Object.assign({\n        resourceId: this.resourceId_\n      }, policy),\n      qs: options\n    }, cb);\n  }\n  /**\n   * Test a set of permissions for a resource.\n   *\n   * @throws {Error} If permissions are not provided.\n   *\n   * @param {string|string[]} permissions The permission(s) to test for.\n   * @param {TestIamPermissionsOptions} [options] Configuration object.\n   * @param {TestIamPermissionsCallback} [callback] Callback function.\n   * @returns {Promise<TestIamPermissionsResponse>}\n   *\n   * @see [Buckets: testIamPermissions API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/testIamPermissions}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('my-bucket');\n   *\n   * //-\n   * // Test a single permission.\n   * //-\n   * const test = 'storage.buckets.delete';\n   *\n   * bucket.iam.testPermissions(test, function(err, permissions, apiResponse) {\n   *   console.log(permissions);\n   *   // {\n   *   //   \"storage.buckets.delete\": true\n   *   // }\n   * });\n   *\n   * //-\n   * // Test several permissions at once.\n   * //-\n   * const tests = [\n   *   'storage.buckets.delete',\n   *   'storage.buckets.get'\n   * ];\n   *\n   * bucket.iam.testPermissions(tests, function(err, permissions) {\n   *   console.log(permissions);\n   *   // {\n   *   //   \"storage.buckets.delete\": false,\n   *   //   \"storage.buckets.get\": true\n   *   // }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.iam.testPermissions(test).then(function(data) {\n   *   const permissions = data[0];\n   *   const apiResponse = data[1];\n   * });\n   */\n\n\n  testPermissions(permissions, optionsOrCallback, callback) {\n    if (!Array.isArray(permissions) && typeof permissions !== 'string') {\n      throw new Error('Permissions are required.');\n    }\n\n    const _util_1$normalize3 = util_1.normalize(optionsOrCallback, callback),\n          options = _util_1$normalize3.options,\n          cb = _util_1$normalize3.callback;\n\n    const permissionsArray = arrify(permissions);\n    const req = Object.assign({\n      permissions: permissionsArray\n    }, options);\n    this.request_({\n      uri: '/iam/testPermissions',\n      qs: req,\n      useQuerystring: true\n    }, (err, resp) => {\n      if (err) {\n        cb(err, null, resp);\n        return;\n      }\n\n      const availablePermissions = arrify(resp.permissions);\n      const permissionsHash = permissionsArray.reduce((acc, permission) => {\n        acc[permission] = availablePermissions.indexOf(permission) > -1;\n        return acc;\n      }, {});\n      cb(null, permissionsHash, resp);\n    });\n  }\n\n}\n\nexports.Iam = Iam;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Iam);","map":null,"metadata":{},"sourceType":"script"}