{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst common_1 = require(\"@google-cloud/common\");\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n/**\n * Create a channel object to interact with a Cloud Storage channel.\n *\n * @see [Object Change Notification]{@link https://cloud.google.com/storage/docs/object-change-notification}\n *\n * @class\n *\n * @param {string} id The ID of the channel.\n * @param {string} resourceId The resource ID of the channel.\n *\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const channel = storage.channel('id', 'resource-id');\n */\n\n\nclass Channel extends common_1.ServiceObject {\n  constructor(storage, id, resourceId) {\n    const config = {\n      parent: storage,\n      baseUrl: '/channels',\n      // An ID shouldn't be included in the API requests.\n      // RE:\n      // https://github.com/GoogleCloudPlatform/google-cloud-node/issues/1145\n      id: '',\n      methods: {// Only need `request`.\n      }\n    };\n    super(config); // TODO: remove type cast to any once ServiceObject's type declaration has\n    // been fixed. https://github.com/googleapis/nodejs-common/issues/176\n\n    const metadata = this.metadata;\n    metadata.id = id;\n    metadata.resourceId = resourceId;\n  }\n  /**\n   * @typedef {array} StopResponse\n   * @property {object} 0 The full API response.\n   */\n\n  /**\n   * @callback StopCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Stop this channel.\n   *\n   * @param {StopCallback} [callback] Callback function.\n   * @returns {Promise<StopResponse>}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const channel = storage.channel('id', 'resource-id');\n   * channel.stop(function(err, apiResponse) {\n   *   if (!err) {\n   *     // Channel stopped successfully.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * channel.stop().then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   */\n\n\n  stop(callback) {\n    callback = callback || common_1.util.noop;\n    this.request({\n      method: 'POST',\n      uri: '/stop',\n      json: this.metadata\n    }, (err, apiResponse) => {\n      callback(err, apiResponse);\n    });\n  }\n\n}\n\nexports.Channel = Channel;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Channel);","map":null,"metadata":{},"sourceType":"script"}