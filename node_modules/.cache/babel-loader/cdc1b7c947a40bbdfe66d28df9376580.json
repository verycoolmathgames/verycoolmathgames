{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst assert = require(\"assert\");\n/**\n * An auto-resizing pool that distributes concurrent operations over multiple\n * clients of type `T`.\n *\n * ClientPool is used within Firestore to manage a pool of GAPIC clients and\n * automatically initializes multiple clients if we issue more than 100\n * concurrent operations.\n *\n * @private\n */\n\n\nclass ClientPool {\n  /**\n   * @param concurrentOperationLimit The number of operations that each client\n   * can handle.\n   * @param clientFactory A factory function called as needed when new clients\n   * are required.\n   */\n  constructor(concurrentOperationLimit, clientFactory) {\n    this.concurrentOperationLimit = concurrentOperationLimit;\n    this.clientFactory = clientFactory;\n    /**\n     * Stores each active clients and how many operations it has outstanding.\n     * @private\n     */\n\n    this.activeClients = new Map();\n  }\n  /**\n   * Returns an already existing client if it has less than the maximum number\n   * of concurrent operations or initializes and returns a new client.\n   *\n   * @private\n   */\n\n\n  acquire() {\n    let selectedClient = null;\n    let selectedRequestCount = 0;\n    this.activeClients.forEach((requestCount, client) => {\n      if (!selectedClient && requestCount < this.concurrentOperationLimit) {\n        selectedClient = client;\n        selectedRequestCount = requestCount;\n      }\n    });\n\n    if (!selectedClient) {\n      selectedClient = this.clientFactory();\n      assert(!this.activeClients.has(selectedClient), 'The provided client factory returned an existing instance');\n    }\n\n    this.activeClients.set(selectedClient, selectedRequestCount + 1);\n    return selectedClient;\n  }\n  /**\n   * Reduces the number of operations for the provided client, potentially\n   * removing it from the pool of active clients.\n   * @private\n   */\n\n\n  release(client) {\n    let requestCount = this.activeClients.get(client) || 0;\n    assert(requestCount > 0, 'No active request');\n    requestCount = requestCount - 1;\n    this.activeClients.set(client, requestCount);\n\n    if (requestCount === 0) {\n      this.garbageCollect();\n    }\n  }\n  /**\n   * The number of currently registered clients.\n   *\n   * @return Number of currently registered clients.\n   * @private\n   */\n  // Visible for testing.\n\n\n  get size() {\n    return this.activeClients.size;\n  }\n  /**\n   * The number of currently active operations.\n   *\n   * @return Number of currently active operations.\n   * @private\n   */\n  // Visible for testing.\n\n\n  get opCount() {\n    let activeOperationCount = 0;\n    this.activeClients.forEach(count => activeOperationCount += count);\n    return activeOperationCount;\n  }\n  /**\n   * Runs the provided operation in this pool. This function may create an\n   * additional client if all existing clients already operate at the concurrent\n   * operation limit.\n   *\n   * @param op A callback function that returns a Promise. The client T will\n   * be returned to the pool when callback finishes.\n   * @return A Promise that resolves with the result of `op`.\n   * @private\n   */\n\n\n  run(op) {\n    const client = this.acquire();\n    return op(client).catch(err => {\n      this.release(client);\n      return Promise.reject(err);\n    }).then(res => {\n      this.release(client);\n      return res;\n    });\n  }\n  /**\n   * Deletes clients that are no longer executing operations. Keeps up to one\n   * idle client to reduce future initialization costs.\n   *\n   * @private\n   */\n\n\n  garbageCollect() {\n    let idleClients = 0;\n    this.activeClients.forEach((requestCount, client) => {\n      if (requestCount === 0) {\n        ++idleClients;\n\n        if (idleClients > 1) {\n          this.activeClients.delete(client);\n        }\n      }\n    });\n  }\n\n}\n\nexports.ClientPool = ClientPool;","map":null,"metadata":{},"sourceType":"script"}