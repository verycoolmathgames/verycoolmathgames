{"ast":null,"code":"'use strict';\n\nmodule.exports = writeFile;\nmodule.exports.sync = writeFileSync;\nmodule.exports._getTmpname = getTmpname; // for testing\n\nmodule.exports._cleanupOnExit = cleanupOnExit;\n\nvar fs = require('graceful-fs');\n\nvar MurmurHash3 = require('imurmurhash');\n\nvar onExit = require('signal-exit');\n\nvar path = require('path');\n\nvar activeFiles = {}; // if we run inside of a worker_thread, `process.pid` is not unique\n\n/* istanbul ignore next */\n\nvar threadId = function getId() {\n  try {\n    var workerThreads = require('worker_threads'); /// if we are in main thread, this is set to `0`\n\n\n    return workerThreads.threadId;\n  } catch (e) {\n    // worker_threads are not available, fallback to 0\n    return 0;\n  }\n}();\n\nvar invocations = 0;\n\nfunction getTmpname(filename) {\n  return filename + '.' + MurmurHash3(__filename).hash(String(process.pid)).hash(String(threadId)).hash(String(++invocations)).result();\n}\n\nfunction cleanupOnExit(tmpfile) {\n  return function () {\n    try {\n      fs.unlinkSync(typeof tmpfile === 'function' ? tmpfile() : tmpfile);\n    } catch (_) {}\n  };\n}\n\nfunction writeFile(filename, data, options, callback) {\n  if (options) {\n    if (options instanceof Function) {\n      callback = options;\n      options = {};\n    } else if (typeof options === 'string') {\n      options = {\n        encoding: options\n      };\n    }\n  } else {\n    options = {};\n  }\n\n  var Promise = options.Promise || global.Promise;\n  var truename;\n  var fd;\n  var tmpfile;\n  /* istanbul ignore next -- The closure only gets called when onExit triggers */\n\n  var removeOnExitHandler = onExit(cleanupOnExit(() => tmpfile));\n  var absoluteName = path.resolve(filename);\n  new Promise(function serializeSameFile(resolve) {\n    // make a queue if it doesn't already exist\n    if (!activeFiles[absoluteName]) activeFiles[absoluteName] = [];\n    activeFiles[absoluteName].push(resolve); // add this job to the queue\n\n    if (activeFiles[absoluteName].length === 1) resolve(); // kick off the first one\n  }).then(function getRealPath() {\n    return new Promise(function (resolve) {\n      fs.realpath(filename, function (_, realname) {\n        truename = realname || filename;\n        tmpfile = getTmpname(truename);\n        resolve();\n      });\n    });\n  }).then(function stat() {\n    return new Promise(function stat(resolve) {\n      if (options.mode && options.chown) resolve();else {\n        // Either mode or chown is not explicitly set\n        // Default behavior is to copy it from original file\n        fs.stat(truename, function (err, stats) {\n          if (err || !stats) resolve();else {\n            options = Object.assign({}, options);\n\n            if (options.mode == null) {\n              options.mode = stats.mode;\n            }\n\n            if (options.chown == null && process.getuid) {\n              options.chown = {\n                uid: stats.uid,\n                gid: stats.gid\n              };\n            }\n\n            resolve();\n          }\n        });\n      }\n    });\n  }).then(function thenWriteFile() {\n    return new Promise(function (resolve, reject) {\n      fs.open(tmpfile, 'w', options.mode, function (err, _fd) {\n        fd = _fd;\n        if (err) reject(err);else resolve();\n      });\n    });\n  }).then(function write() {\n    return new Promise(function (resolve, reject) {\n      if (Buffer.isBuffer(data)) {\n        fs.write(fd, data, 0, data.length, 0, function (err) {\n          if (err) reject(err);else resolve();\n        });\n      } else if (data != null) {\n        fs.write(fd, String(data), 0, String(options.encoding || 'utf8'), function (err) {\n          if (err) reject(err);else resolve();\n        });\n      } else resolve();\n    });\n  }).then(function syncAndClose() {\n    return new Promise(function (resolve, reject) {\n      if (options.fsync !== false) {\n        fs.fsync(fd, function (err) {\n          if (err) fs.close(fd, () => reject(err));else fs.close(fd, resolve);\n        });\n      } else {\n        fs.close(fd, resolve);\n      }\n    });\n  }).then(function chown() {\n    fd = null;\n\n    if (options.chown) {\n      return new Promise(function (resolve, reject) {\n        fs.chown(tmpfile, options.chown.uid, options.chown.gid, function (err) {\n          if (err) reject(err);else resolve();\n        });\n      });\n    }\n  }).then(function chmod() {\n    if (options.mode) {\n      return new Promise(function (resolve, reject) {\n        fs.chmod(tmpfile, options.mode, function (err) {\n          if (err) reject(err);else resolve();\n        });\n      });\n    }\n  }).then(function rename() {\n    return new Promise(function (resolve, reject) {\n      fs.rename(tmpfile, truename, function (err) {\n        if (err) reject(err);else resolve();\n      });\n    });\n  }).then(function success() {\n    removeOnExitHandler();\n    callback();\n  }, function fail(err) {\n    return new Promise(resolve => {\n      return fd ? fs.close(fd, resolve) : resolve();\n    }).then(() => {\n      removeOnExitHandler();\n      fs.unlink(tmpfile, function () {\n        callback(err);\n      });\n    });\n  }).then(function checkQueue() {\n    activeFiles[absoluteName].shift(); // remove the element added by serializeSameFile\n\n    if (activeFiles[absoluteName].length > 0) {\n      activeFiles[absoluteName][0](); // start next job if one is pending\n    } else delete activeFiles[absoluteName];\n  });\n}\n\nfunction writeFileSync(filename, data, options) {\n  if (typeof options === 'string') options = {\n    encoding: options\n  };else if (!options) options = {};\n\n  try {\n    filename = fs.realpathSync(filename);\n  } catch (ex) {// it's ok, it'll happen on a not yet existing file\n  }\n\n  var tmpfile = getTmpname(filename);\n\n  if (!options.mode || !options.chown) {\n    // Either mode or chown is not explicitly set\n    // Default behavior is to copy it from original file\n    try {\n      var stats = fs.statSync(filename);\n      options = Object.assign({}, options);\n\n      if (!options.mode) {\n        options.mode = stats.mode;\n      }\n\n      if (!options.chown && process.getuid) {\n        options.chown = {\n          uid: stats.uid,\n          gid: stats.gid\n        };\n      }\n    } catch (ex) {// ignore stat errors\n    }\n  }\n\n  var fd;\n  var cleanup = cleanupOnExit(tmpfile);\n  var removeOnExitHandler = onExit(cleanup);\n\n  try {\n    fd = fs.openSync(tmpfile, 'w', options.mode);\n\n    if (Buffer.isBuffer(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0);\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'));\n    }\n\n    if (options.fsync !== false) {\n      fs.fsyncSync(fd);\n    }\n\n    fs.closeSync(fd);\n    if (options.chown) fs.chownSync(tmpfile, options.chown.uid, options.chown.gid);\n    if (options.mode) fs.chmodSync(tmpfile, options.mode);\n    fs.renameSync(tmpfile, filename);\n    removeOnExitHandler();\n  } catch (err) {\n    if (fd) {\n      try {\n        fs.closeSync(fd);\n      } catch (ex) {// ignore close errors at this stage, error may have closed fd already.\n      }\n    }\n\n    removeOnExitHandler();\n    cleanup();\n    throw err;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}