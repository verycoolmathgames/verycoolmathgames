{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * A Promise implementation that supports deferred resolution.\n * @private\n */\n\nclass Deferred {\n  constructor() {\n    this.resolve = () => {};\n\n    this.reject = () => {};\n\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n\n}\n\nexports.Deferred = Deferred;\n/**\n * Generate a unique client-side identifier.\n *\n * Used for the creation of new documents.\n *\n * @private\n * @returns {string} A unique 20-character wide identifier.\n */\n\nfunction autoId() {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let autoId = '';\n\n  for (let i = 0; i < 20; i++) {\n    autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n\n  return autoId;\n}\n\nexports.autoId = autoId;\n/**\n * Generate a short and semi-random client-side identifier.\n *\n * Used for the creation of request tags.\n *\n * @private\n * @returns {string} A random 5-character wide identifier.\n */\n\nfunction requestTag() {\n  return autoId().substr(0, 5);\n}\n\nexports.requestTag = requestTag;\n/**\n * Determines whether `value` is a JavaScript object.\n *\n * @private\n */\n\nfunction isObject(value) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n}\n\nexports.isObject = isObject;\n/**\n * Returns whether `value` has no custom properties.\n *\n * @private\n */\n\nfunction isEmpty(value) {\n  return Object.keys(value).length === 0;\n}\n\nexports.isEmpty = isEmpty;\n/**\n * Determines whether `value` is a JavaScript function.\n *\n * @private\n */\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\nexports.isFunction = isFunction;","map":null,"metadata":{},"sourceType":"script"}