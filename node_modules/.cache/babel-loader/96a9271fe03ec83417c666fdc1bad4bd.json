{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\n\nconst base64js = require(\"base64-js\");\n\nconst isbrowser_1 = require(\"../../isbrowser\"); // Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\n\n\nif (isbrowser_1.isBrowser() && typeof TextEncoder === 'undefined') {\n  require('fast-text-encoding');\n}\n\nclass BrowserCrypto {\n  constructor() {\n    if (typeof window === 'undefined' || window.crypto === undefined || window.crypto.subtle === undefined) {\n      throw new Error('SubtleCrypto not found. Make sure it\\'s an https:// website.');\n    }\n  }\n\n  sha256DigestBase64(str) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // SubtleCrypto digest() method is async, so we must make\n      // this method async as well.\n      // To calculate SHA256 digest using SubtleCrypto, we first\n      // need to convert an input string to an ArrayBuffer:\n      const inputBuffer = new TextEncoder().encode(str); // Result is ArrayBuffer as well.\n\n      const outputBuffer = yield window.crypto.subtle.digest('SHA-256', inputBuffer);\n      return base64js.fromByteArray(new Uint8Array(outputBuffer));\n    });\n  }\n\n  randomBytesBase64(count) {\n    const array = new Uint8Array(count);\n    window.crypto.getRandomValues(array);\n    return base64js.fromByteArray(array);\n  }\n\n  verify(pubkey, data, signature) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const algo = {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: {\n          name: 'SHA-256'\n        }\n      };\n      const dataArray = new TextEncoder().encode(data); // base64js requires padding, so let's add some '='\n\n      while (signature.length % 4 !== 0) {\n        signature += '=';\n      }\n\n      const signatureArray = base64js.toByteArray(signature);\n      const cryptoKey = yield window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']); // SubtleCrypto's verify method is async so we must make\n      // this method async as well.\n\n      const result = yield window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n      return result;\n    });\n  }\n\n  createSign(algorithm) {\n    throw new Error('createSign is not implemented in BrowserCrypto');\n  }\n\n  decodeBase64StringUtf8(base64) {\n    const uint8array = base64js.toByteArray(base64);\n    const result = new TextDecoder().decode(uint8array);\n    return result;\n  }\n\n  encodeBase64StringUtf8(text) {\n    const uint8array = new TextEncoder().encode(text);\n    const result = base64js.fromByteArray(uint8array);\n    return result;\n  }\n\n}\n\nexports.BrowserCrypto = BrowserCrypto;","map":null,"metadata":{},"sourceType":"script"}