{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst gcpMetadata = require(\"gcp-metadata\");\n\nvar GCPEnv;\n\n(function (GCPEnv) {\n  GCPEnv[\"APP_ENGINE\"] = \"APP_ENGINE\";\n  GCPEnv[\"KUBERNETES_ENGINE\"] = \"KUBERNETES_ENGINE\";\n  GCPEnv[\"CLOUD_FUNCTIONS\"] = \"CLOUD_FUNCTIONS\";\n  GCPEnv[\"COMPUTE_ENGINE\"] = \"COMPUTE_ENGINE\";\n  GCPEnv[\"NONE\"] = \"NONE\";\n})(GCPEnv = exports.GCPEnv || (exports.GCPEnv = {}));\n\nlet env;\n\nfunction clear() {\n  env = undefined;\n}\n\nexports.clear = clear;\n\nfunction getEnv() {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!env) {\n      if (isAppEngine()) {\n        env = GCPEnv.APP_ENGINE;\n      } else if (isCloudFunction()) {\n        env = GCPEnv.CLOUD_FUNCTIONS;\n      } else if (yield isKubernetesEngine()) {\n        env = GCPEnv.KUBERNETES_ENGINE;\n      } else if (yield isComputeEngine()) {\n        env = GCPEnv.COMPUTE_ENGINE;\n      } else {\n        env = GCPEnv.NONE;\n      }\n    }\n\n    return env;\n  });\n}\n\nexports.getEnv = getEnv;\n\nfunction isAppEngine() {\n  return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\n}\n\nfunction isCloudFunction() {\n  return !!process.env.FUNCTION_NAME;\n}\n\nfunction isKubernetesEngine() {\n  return __awaiter(this, void 0, void 0, function* () {\n    try {\n      yield gcpMetadata.instance('attributes/cluster-name');\n      return true;\n    } catch (e) {\n      return false;\n    }\n  });\n}\n\nfunction isComputeEngine() {\n  return __awaiter(this, void 0, void 0, function* () {\n    return gcpMetadata.isAvailable();\n  });\n}","map":null,"metadata":{},"sourceType":"script"}