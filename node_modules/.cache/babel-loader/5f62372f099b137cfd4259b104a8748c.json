{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst gcpMetadata = require(\"gcp-metadata\");\n\nconst messages = require(\"../messages\");\n\nconst oauth2client_1 = require(\"./oauth2client\");\n\nclass Compute extends oauth2client_1.OAuth2Client {\n  /**\n   * Google Compute Engine service account credentials.\n   *\n   * Retrieve access token from the metadata server.\n   * See: https://developers.google.com/compute/docs/authentication\n   */\n  constructor(options = {}) {\n    super(options); // Start with an expired refresh token, which will automatically be\n    // refreshed before the first API call is made.\n\n    this.credentials = {\n      expiry_date: 1,\n      refresh_token: 'compute-placeholder'\n    };\n    this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n  }\n  /**\n   * Indicates whether the credential requires scopes to be created by calling\n   * createdScoped before use.\n   * @deprecated\n   * @return Boolean indicating if scope is required.\n   */\n\n\n  createScopedRequired() {\n    // On compute engine, scopes are specified at the compute instance's\n    // creation time, and cannot be changed. For this reason, always return\n    // false.\n    messages.warn(messages.COMPUTE_CREATE_SCOPED_DEPRECATED);\n    return false;\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken Unused parameter\n   */\n\n\n  refreshTokenNoCache(refreshToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const tokenPath = \"service-accounts/\".concat(this.serviceAccountEmail, \"/token\");\n      let data;\n\n      try {\n        data = yield gcpMetadata.instance(tokenPath);\n      } catch (e) {\n        e.message = 'Could not refresh access token.';\n        throw e;\n      }\n\n      const tokens = data;\n\n      if (data && data.expires_in) {\n        tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n        delete tokens.expires_in;\n      }\n\n      this.emit('tokens', tokens);\n      return {\n        tokens,\n        res: null\n      };\n    });\n  }\n\n  requestAsync(opts, retry = false) {\n    return super.requestAsync(opts, retry).catch(e => {\n      const res = e.response;\n\n      if (res && res.status) {\n        let helpfulMessage = null;\n\n        if (res.status === 403) {\n          helpfulMessage = 'A Forbidden error was returned while attempting to retrieve an access ' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have the correct permission scopes specified.';\n        } else if (res.status === 404) {\n          helpfulMessage = 'A Not Found error was returned while attempting to retrieve an access' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have any permission scopes specified.';\n        }\n\n        if (helpfulMessage) {\n          if (e && e.message && !retry) {\n            helpfulMessage += ' ' + e.message;\n          }\n\n          if (e) {\n            e.message = helpfulMessage;\n          } else {\n            e = new Error(helpfulMessage);\n            e.code = res.status.toString();\n          }\n        }\n      }\n\n      throw e;\n    });\n  }\n\n}\n\nexports.Compute = Compute;","map":null,"metadata":{},"sourceType":"script"}