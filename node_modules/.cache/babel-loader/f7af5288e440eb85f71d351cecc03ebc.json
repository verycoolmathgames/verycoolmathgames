{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst deepEqual = require('deep-equal');\n\nconst serializer_1 = require(\"./serializer\");\n\nconst validate_1 = require(\"./validate\");\n/**\n * Sentinel values that can be used when writing documents with set(), create()\n * or update().\n *\n * @class\n */\n\n\nclass FieldValue {\n  /**\n   * @hideconstructor\n   */\n  constructor() {}\n  /**\n   * Returns a sentinel for use with update() or set() with {merge:true} to mark\n   * a field for deletion.\n   *\n   * @returns {FieldValue} The sentinel value to use in your objects.\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   * let data = { a: 'b', c: 'd' };\n   *\n   * documentRef.set(data).then(() => {\n   *   return documentRef.update({a: Firestore.FieldValue.delete()});\n   * }).then(() => {\n   *   // Document now only contains { c: 'd' }\n   * });\n   */\n\n\n  static delete() {\n    return DeleteTransform.DELETE_SENTINEL;\n  }\n  /**\n   * Returns a sentinel used with set(), create() or update() to include a\n   * server-generated timestamp in the written data.\n   *\n   * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n   * create() or update().\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.set({\n   *   time: Firestore.FieldValue.serverTimestamp()\n   * }).then(() => {\n   *   return documentRef.get();\n   * }).then(doc => {\n   *   console.log(`Server time set to ${doc.get('time')}`);\n   * });\n   */\n\n\n  static serverTimestamp() {\n    return ServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL;\n  }\n  /**\n   * Returns a special value that can be used with set(), create() or update()\n   * that tells the server to increment the the field's current value by the\n   * given value.\n   *\n   * If either current field value or the operand uses floating point\n   * precision, both values will be interpreted as floating point numbers and\n   * all arithmetic will follow IEEE 754 semantics. Otherwise, integer\n   * precision is kept and the result is capped between -2^63 and 2^63-1.\n   *\n   * If the current field value is not of type 'number', or if the field does\n   * not yet exist, the transformation will set the field to the given value.\n   *\n   * @param {number} n The value to increment by.\n   * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n   * create() or update().\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.update(\n   *   'counter', Firestore.FieldValue.increment(1)\n   * ).then(() => {\n   *   return documentRef.get();\n   * }).then(doc => {\n   *   // doc.get('counter') was incremented\n   * });\n   */\n\n\n  static increment(n) {\n    validate_1.validateMinNumberOfArguments('FieldValue.increment', arguments, 1);\n    return new NumericIncrementTransform(n);\n  }\n  /**\n   * Returns a special value that can be used with set(), create() or update()\n   * that tells the server to union the given elements with any array value that\n   * already exists on the server. Each specified element that doesn't already\n   * exist in the array will be added to the end. If the field being modified is\n   * not already an array it will be overwritten with an array containing\n   * exactly the specified elements.\n   *\n   * @param {...*} elements The elements to union into the array.\n   * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n   * create() or update().\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.update(\n   *   'array', Firestore.FieldValue.arrayUnion('foo')\n   * ).then(() => {\n   *   return documentRef.get();\n   * }).then(doc => {\n   *   // doc.get('array') contains field 'foo'\n   * });\n   */\n\n\n  static arrayUnion(...elements) {\n    validate_1.validateMinNumberOfArguments('FieldValue.arrayUnion', arguments, 1);\n    return new ArrayUnionTransform(elements);\n  }\n  /**\n   * Returns a special value that can be used with set(), create() or update()\n   * that tells the server to remove the given elements from any array value\n   * that already exists on the server. All instances of each element specified\n   * will be removed from the array. If the field being modified is not already\n   * an array it will be overwritten with an empty array.\n   *\n   * @param {...*} elements The elements to remove from the array.\n   * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n   * create() or update().\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.update(\n   *   'array', Firestore.FieldValue.arrayRemove('foo')\n   * ).then(() => {\n   *   return documentRef.get();\n   * }).then(doc => {\n   *   // doc.get('array') no longer contains field 'foo'\n   * });\n   */\n\n\n  static arrayRemove(...elements) {\n    validate_1.validateMinNumberOfArguments('FieldValue.arrayRemove', arguments, 1);\n    return new ArrayRemoveTransform(elements);\n  }\n  /**\n   * Returns true if this `FieldValue` is equal to the provided value.\n   *\n   * @param {*} other The value to compare against.\n   * @return {boolean} true if this `FieldValue` is equal to the provided value.\n   *\n   * @example\n   * let fieldValues = [\n   *   Firestore.FieldValue.increment(-1.0),\n   *   Firestore.FieldValue.increment(-1),\n   *   Firestore.FieldValue.increment(-0.0),\n   *   Firestore.FieldValue.increment(-0),\n   *   Firestore.FieldValue.increment(0),\n   *   Firestore.FieldValue.increment(0.0),\n   *   Firestore.FieldValue.increment(1),\n   *   Firestore.FieldValue.increment(1.0)\n   * ];\n   *\n   * let equal = 0;\n   * for (let i = 0; i < fieldValues.length; ++i) {\n   *   for (let j = i + 1; j < fieldValues.length; ++j) {\n   *     if (fieldValues[i].isEqual(fieldValues[j])) {\n   *       ++equal;\n   *     }\n   *   }\n   * }\n   * console.log(`Found ${equal} equalities.`);\n   */\n\n\n  isEqual(other) {\n    return this === other;\n  }\n\n}\n\nexports.FieldValue = FieldValue;\n/**\n * An internal interface shared by all field transforms.\n *\n * A 'FieldTransform` subclass should implement '.includeInDocumentMask',\n * '.includeInDocumentTransform' and 'toProto' (if '.includeInDocumentTransform'\n * is 'true').\n *\n * @private\n * @abstract\n */\n\nclass FieldTransform extends FieldValue {}\n\nexports.FieldTransform = FieldTransform;\n/**\n * A transform that deletes a field from a Firestore document.\n *\n * @private\n */\n\nclass DeleteTransform extends FieldTransform {\n  constructor() {\n    super();\n  }\n  /**\n   * Deletes are included in document masks.\n   * @private\n   */\n\n\n  get includeInDocumentMask() {\n    return true;\n  }\n  /**\n   * Deletes are are omitted from document transforms.\n   * @private\n   */\n\n\n  get includeInDocumentTransform() {\n    return false;\n  }\n\n  get methodName() {\n    return 'FieldValue.delete';\n  }\n\n  validate() {}\n\n  toProto(serializer, fieldPath) {\n    throw new Error('FieldValue.delete() should not be included in a FieldTransform');\n  }\n\n}\n/**\n * Sentinel value for a field delete.\n * @private\n */\n\n\nDeleteTransform.DELETE_SENTINEL = new DeleteTransform();\nexports.DeleteTransform = DeleteTransform;\n/**\n * A transform that sets a field to the Firestore server time.\n *\n * @private\n */\n\nclass ServerTimestampTransform extends FieldTransform {\n  constructor() {\n    super();\n  }\n  /**\n   * Server timestamps are omitted from document masks.\n   *\n   * @private\n   */\n\n\n  get includeInDocumentMask() {\n    return false;\n  }\n  /**\n   * Server timestamps are included in document transforms.\n   *\n   * @private\n   */\n\n\n  get includeInDocumentTransform() {\n    return true;\n  }\n\n  get methodName() {\n    return 'FieldValue.serverTimestamp';\n  }\n\n  validate() {}\n\n  toProto(serializer, fieldPath) {\n    return {\n      fieldPath: fieldPath.formattedName,\n      setToServerValue: 'REQUEST_TIME'\n    };\n  }\n\n}\n/**\n * Sentinel value for a server timestamp.\n *\n * @private\n */\n\n\nServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL = new ServerTimestampTransform();\n/**\n * Increments a field value on the backend.\n *\n * @private\n */\n\nclass NumericIncrementTransform extends FieldTransform {\n  constructor(operand) {\n    super();\n    this.operand = operand;\n  }\n  /**\n   * Numeric transforms are omitted from document masks.\n   *\n   * @private\n   */\n\n\n  get includeInDocumentMask() {\n    return false;\n  }\n  /**\n   * Numeric transforms are included in document transforms.\n   *\n   * @private\n   */\n\n\n  get includeInDocumentTransform() {\n    return true;\n  }\n\n  get methodName() {\n    return 'FieldValue.increment';\n  }\n\n  validate() {\n    validate_1.validateNumber('FieldValue.increment()', this.operand);\n  }\n\n  toProto(serializer, fieldPath) {\n    const encodedOperand = serializer.encodeValue(this.operand);\n    return {\n      fieldPath: fieldPath.formattedName,\n      increment: encodedOperand\n    };\n  }\n\n  isEqual(other) {\n    return this === other || other instanceof NumericIncrementTransform && this.operand === other.operand;\n  }\n\n}\n/**\n * Transforms an array value via a union operation.\n *\n * @private\n */\n\n\nclass ArrayUnionTransform extends FieldTransform {\n  constructor(elements) {\n    super();\n    this.elements = elements;\n  }\n  /**\n   * Array transforms are omitted from document masks.\n   * @private\n   */\n\n\n  get includeInDocumentMask() {\n    return false;\n  }\n  /**\n   * Array transforms are included in document transforms.\n   * @private\n   */\n\n\n  get includeInDocumentTransform() {\n    return true;\n  }\n\n  get methodName() {\n    return 'FieldValue.arrayUnion';\n  }\n\n  validate() {\n    for (let i = 0; i < this.elements.length; ++i) {\n      validateArrayElement(i, this.elements[i]);\n    }\n  }\n\n  toProto(serializer, fieldPath) {\n    const encodedElements = serializer.encodeValue(this.elements).arrayValue;\n    return {\n      fieldPath: fieldPath.formattedName,\n      appendMissingElements: encodedElements\n    };\n  }\n\n  isEqual(other) {\n    return this === other || other instanceof ArrayUnionTransform && deepEqual(this.elements, other.elements, {\n      strict: true\n    });\n  }\n\n}\n/**\n * Transforms an array value via a remove operation.\n *\n * @private\n */\n\n\nclass ArrayRemoveTransform extends FieldTransform {\n  constructor(elements) {\n    super();\n    this.elements = elements;\n  }\n  /**\n   * Array transforms are omitted from document masks.\n   * @private\n   */\n\n\n  get includeInDocumentMask() {\n    return false;\n  }\n  /**\n   * Array transforms are included in document transforms.\n   * @private\n   */\n\n\n  get includeInDocumentTransform() {\n    return true;\n  }\n\n  get methodName() {\n    return 'FieldValue.arrayRemove';\n  }\n\n  validate() {\n    for (let i = 0; i < this.elements.length; ++i) {\n      validateArrayElement(i, this.elements[i]);\n    }\n  }\n\n  toProto(serializer, fieldPath) {\n    const encodedElements = serializer.encodeValue(this.elements).arrayValue;\n    return {\n      fieldPath: fieldPath.formattedName,\n      removeAllFromArray: encodedElements\n    };\n  }\n\n  isEqual(other) {\n    return this === other || other instanceof ArrayRemoveTransform && deepEqual(this.elements, other.elements, {\n      strict: true\n    });\n  }\n\n}\n/**\n * Validates that `value` can be used as an element inside of an array. Certain\n * field values (such as ServerTimestamps) are rejected.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The value to validate.\n */\n\n\nfunction validateArrayElement(arg, value) {\n  serializer_1.validateUserInput(arg, value, 'array element',\n  /*path=*/\n  {\n    allowDeletes: 'none',\n    allowTransforms: false\n  },\n  /*path=*/\n  undefined,\n  /*level=*/\n  0,\n  /*inArray=*/\n  true);\n}","map":null,"metadata":{},"sourceType":"script"}