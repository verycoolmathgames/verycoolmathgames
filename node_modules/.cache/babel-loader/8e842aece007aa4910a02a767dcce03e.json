{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst crypto = require(\"crypto\");\n\nclass NodeCrypto {\n  sha256DigestBase64(str) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return crypto.createHash('sha256').update(str).digest('base64');\n    });\n  }\n\n  randomBytesBase64(count) {\n    return crypto.randomBytes(count).toString('base64');\n  }\n\n  verify(pubkey, data, signature) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const verifier = crypto.createVerify('sha256');\n      verifier.update(data);\n      return verifier.verify(pubkey, signature, 'base64');\n    });\n  }\n\n  createSign(algorithm) {\n    return crypto.createSign(algorithm);\n  }\n\n  decodeBase64StringUtf8(base64) {\n    return Buffer.from(base64, 'base64').toString('utf-8');\n  }\n\n  encodeBase64StringUtf8(text) {\n    return Buffer.from(text, 'utf-8').toString('base64');\n  }\n\n}\n\nexports.NodeCrypto = NodeCrypto;","map":null,"metadata":{},"sourceType":"script"}