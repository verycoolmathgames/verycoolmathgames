{"ast":null,"code":"'use strict';\n\nconst mimicFn = require('mimic-fn');\n\nconst calledFunctions = new WeakMap();\n\nconst oneTime = (fn, options = {}) => {\n  if (typeof fn !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  let ret;\n  let isCalled = false;\n  let callCount = 0;\n  const functionName = fn.displayName || fn.name || '<anonymous>';\n\n  const onetime = function (...args) {\n    calledFunctions.set(onetime, ++callCount);\n\n    if (isCalled) {\n      if (options.throw === true) {\n        throw new Error(\"Function `\".concat(functionName, \"` can only be called once\"));\n      }\n\n      return ret;\n    }\n\n    isCalled = true;\n    ret = fn.apply(this, args);\n    fn = null;\n    return ret;\n  };\n\n  mimicFn(onetime, fn);\n  calledFunctions.set(onetime, callCount);\n  return onetime;\n};\n\nmodule.exports = oneTime; // TODO: Remove this for the next major release\n\nmodule.exports.default = oneTime;\n\nmodule.exports.callCount = fn => {\n  if (!calledFunctions.has(fn)) {\n    throw new Error(\"The given function `\".concat(fn.name, \"` is not wrapped by the `onetime` package\"));\n  }\n\n  return calledFunctions.get(fn);\n};","map":null,"metadata":{},"sourceType":"script"}